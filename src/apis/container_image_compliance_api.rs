/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`ext_aggregate_cluster_assessments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateClusterAssessmentsError {
    Status400(models::DomainPeriodAggregateClusterAssessmentsResponse),
    Status401(models::DomainPeriodAggregateClusterAssessmentsResponse),
    Status403(models::DomainPeriodAggregateClusterAssessmentsResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateClusterAssessmentsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_failed_containers_by_rules_path`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateFailedContainersByRulesPathError {
    Status400(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    Status401(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    Status403(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_failed_containers_count_by_severity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateFailedContainersCountBySeverityError {
    Status400(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    Status401(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    Status403(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_failed_images_by_rules_path`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateFailedImagesByRulesPathError {
    Status400(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    Status401(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    Status403(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateFailedAssetsByRulesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_failed_images_count_by_severity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateFailedImagesCountBySeverityError {
    Status400(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    Status401(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    Status403(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateFailedAssetCountBySeverityResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_failed_rules_by_clusters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateFailedRulesByClustersError {
    Status400(models::DomainPeriodAggregateFailedRulesByClustersResponse),
    Status401(models::DomainPeriodAggregateFailedRulesByClustersResponse),
    Status403(models::DomainPeriodAggregateFailedRulesByClustersResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateFailedRulesByClustersResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_failed_rules_by_images`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateFailedRulesByImagesError {
    Status400(models::DomainPeriodAggregateFailedRulesByImagesResponse),
    Status401(models::DomainPeriodAggregateFailedRulesByImagesResponse),
    Status403(models::DomainPeriodAggregateFailedRulesByImagesResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateFailedRulesByImagesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_failed_rules_count_by_severity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateFailedRulesCountBySeverityError {
    Status400(models::DomainPeriodAggregateFailedRulesCountBySeverityResponse),
    Status401(models::DomainPeriodAggregateFailedRulesCountBySeverityResponse),
    Status403(models::DomainPeriodAggregateFailedRulesCountBySeverityResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateFailedRulesCountBySeverityResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_image_assessments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateImageAssessmentsError {
    Status400(models::DomainPeriodAggregateImageAssessmentsResponse),
    Status401(models::DomainPeriodAggregateImageAssessmentsResponse),
    Status403(models::DomainPeriodAggregateImageAssessmentsResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateImageAssessmentsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_rules_assessments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateRulesAssessmentsError {
    Status400(models::DomainPeriodAggregateRulesAssessmentsResponse),
    Status401(models::DomainPeriodAggregateRulesAssessmentsResponse),
    Status403(models::DomainPeriodAggregateRulesAssessmentsResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateRulesAssessmentsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ext_aggregate_rules_by_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtAggregateRulesByStatusError {
    Status400(models::DomainPeriodAggregateRulesByStatusResponse),
    Status401(models::DomainPeriodAggregateRulesByStatusResponse),
    Status403(models::DomainPeriodAggregateRulesByStatusResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::DomainPeriodAggregateRulesByStatusResponse),
    UnknownValue(serde_json::Value),
}


pub async fn ext_aggregate_cluster_assessments(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateClusterAssessmentsResponse, Error<ExtAggregateClusterAssessmentsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/compliance-by-clusters/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateClusterAssessmentsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateClusterAssessmentsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateClusterAssessmentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_failed_containers_by_rules_path(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateFailedAssetsByRulesResponse, Error<ExtAggregateFailedContainersByRulesPathError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/failed-containers-by-rules/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetsByRulesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetsByRulesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateFailedContainersByRulesPathError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_failed_containers_count_by_severity(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateFailedAssetCountBySeverityResponse, Error<ExtAggregateFailedContainersCountBySeverityError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/failed-containers-count-by-severity/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetCountBySeverityResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetCountBySeverityResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateFailedContainersCountBySeverityError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_failed_images_by_rules_path(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateFailedAssetsByRulesResponse, Error<ExtAggregateFailedImagesByRulesPathError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/failed-images-by-rules/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetsByRulesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetsByRulesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateFailedImagesByRulesPathError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_failed_images_count_by_severity(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateFailedAssetCountBySeverityResponse, Error<ExtAggregateFailedImagesCountBySeverityError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/failed-images-count-by-severity/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetCountBySeverityResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateFailedAssetCountBySeverityResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateFailedImagesCountBySeverityError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_failed_rules_by_clusters(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateFailedRulesByClustersResponse, Error<ExtAggregateFailedRulesByClustersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/failed-rules-by-clusters/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateFailedRulesByClustersResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateFailedRulesByClustersResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateFailedRulesByClustersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_failed_rules_by_images(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateFailedRulesByImagesResponse, Error<ExtAggregateFailedRulesByImagesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/failed-rules-by-images/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateFailedRulesByImagesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateFailedRulesByImagesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateFailedRulesByImagesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_failed_rules_count_by_severity(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateFailedRulesCountBySeverityResponse, Error<ExtAggregateFailedRulesCountBySeverityError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/failed-rules-count-by-severity/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateFailedRulesCountBySeverityResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateFailedRulesCountBySeverityResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateFailedRulesCountBySeverityError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_image_assessments(configuration: &configuration::Configuration, filter: Option<&str>, after: Option<&str>, limit: Option<&str>) -> Result<models::DomainPeriodAggregateImageAssessmentsResponse, Error<ExtAggregateImageAssessmentsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;
    let p_after = after;
    let p_limit = limit;

    let uri_str = format!("{}/container-compliance/aggregates/compliance-by-images/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateImageAssessmentsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateImageAssessmentsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateImageAssessmentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_rules_assessments(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateRulesAssessmentsResponse, Error<ExtAggregateRulesAssessmentsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/compliance-by-rules/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateRulesAssessmentsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateRulesAssessmentsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateRulesAssessmentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn ext_aggregate_rules_by_status(configuration: &configuration::Configuration, filter: Option<&str>) -> Result<models::DomainPeriodAggregateRulesByStatusResponse, Error<ExtAggregateRulesByStatusError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;

    let uri_str = format!("{}/container-compliance/aggregates/rules-by-status/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DomainPeriodAggregateRulesByStatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DomainPeriodAggregateRulesByStatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExtAggregateRulesByStatusError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

