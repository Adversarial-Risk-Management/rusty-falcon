/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;

/// struct for typed errors of method [`create_saved_searches_dynamic_execute_alt_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSavedSearchesDynamicExecuteAltV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_saved_searches_dynamic_execute_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSavedSearchesDynamicExecuteV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_saved_searches_execute_alt_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSavedSearchesExecuteAltV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_saved_searches_execute_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSavedSearchesExecuteV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_saved_searches_ingest_alt_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSavedSearchesIngestAltV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_saved_searches_ingest_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSavedSearchesIngestV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_saved_searches_execute_alt_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSavedSearchesExecuteAltV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_saved_searches_execute_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSavedSearchesExecuteV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_saved_searches_job_results_download_alt_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSavedSearchesJobResultsDownloadAltV1Error {
    Status400(models::ApiPeriodEntitiesResponse),
    Status401(models::ApiPeriodEntitiesResponse),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status404(models::ApiPeriodEntitiesResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodEntitiesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_saved_searches_job_results_download_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSavedSearchesJobResultsDownloadV1Error {
    Status400(models::ApiPeriodEntitiesResponse),
    Status401(models::ApiPeriodEntitiesResponse),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status404(models::ApiPeriodEntitiesResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodEntitiesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ingest_data_async_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IngestDataAsyncV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ingest_data_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IngestDataV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_repos_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListReposV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_view_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListViewV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

pub async fn create_saved_searches_dynamic_execute_alt_v1(
    configuration: &configuration::Configuration,
    body: models::ApidomainPeriodDynamicExecuteSearchRequestV1,
    app_id: Option<&str>,
    include_schema_generation: Option<bool>,
    include_test_data: Option<bool>,
    infer_json_types: Option<bool>,
    match_response_schema: Option<bool>,
    metadata: Option<bool>,
    mode: Option<&str>,
    x_cs_useruuid: Option<&str>,
) -> Result<
    models::ApidomainPeriodQueryResponseWrapperV1,
    Error<CreateSavedSearchesDynamicExecuteAltV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches-dynamic-execute/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_schema_generation {
        local_var_req_builder = local_var_req_builder
            .query(&[("include_schema_generation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_test_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("include_test_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = match_response_schema {
        local_var_req_builder =
            local_var_req_builder.query(&[("match_response_schema", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = metadata {
        local_var_req_builder =
            local_var_req_builder.query(&[("metadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode {
        local_var_req_builder =
            local_var_req_builder.query(&[("mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_cs_useruuid {
        local_var_req_builder =
            local_var_req_builder.header("X-CS-USERUUID", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSavedSearchesDynamicExecuteAltV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_saved_searches_dynamic_execute_v1(
    configuration: &configuration::Configuration,
    body: models::ApidomainPeriodDynamicExecuteSearchRequestV1,
    app_id: Option<&str>,
    include_schema_generation: Option<bool>,
    include_test_data: Option<bool>,
    infer_json_types: Option<bool>,
    match_response_schema: Option<bool>,
    metadata: Option<bool>,
    mode: Option<&str>,
    x_cs_useruuid: Option<&str>,
) -> Result<
    models::ApidomainPeriodQueryResponseWrapperV1,
    Error<CreateSavedSearchesDynamicExecuteV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches/execute-dynamic/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_schema_generation {
        local_var_req_builder = local_var_req_builder
            .query(&[("include_schema_generation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_test_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("include_test_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = match_response_schema {
        local_var_req_builder =
            local_var_req_builder.query(&[("match_response_schema", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = metadata {
        local_var_req_builder =
            local_var_req_builder.query(&[("metadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode {
        local_var_req_builder =
            local_var_req_builder.query(&[("mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_cs_useruuid {
        local_var_req_builder =
            local_var_req_builder.header("X-CS-USERUUID", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSavedSearchesDynamicExecuteV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_saved_searches_execute_alt_v1(
    configuration: &configuration::Configuration,
    body: models::ApidomainPeriodSavedSearchExecuteRequestV1,
    app_id: Option<&str>,
    detailed: Option<bool>,
    include_test_data: Option<bool>,
    infer_json_types: Option<bool>,
    match_response_schema: Option<bool>,
    metadata: Option<bool>,
    x_cs_useruuid: Option<&str>,
) -> Result<
    models::ApidomainPeriodQueryResponseWrapperV1,
    Error<CreateSavedSearchesExecuteAltV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches-execute/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = detailed {
        local_var_req_builder =
            local_var_req_builder.query(&[("detailed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_test_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("include_test_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = match_response_schema {
        local_var_req_builder =
            local_var_req_builder.query(&[("match_response_schema", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = metadata {
        local_var_req_builder =
            local_var_req_builder.query(&[("metadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_cs_useruuid {
        local_var_req_builder =
            local_var_req_builder.header("X-CS-USERUUID", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSavedSearchesExecuteAltV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_saved_searches_execute_v1(
    configuration: &configuration::Configuration,
    body: models::ApidomainPeriodSavedSearchExecuteRequestV1,
    app_id: Option<&str>,
    detailed: Option<bool>,
    include_test_data: Option<bool>,
    infer_json_types: Option<bool>,
    match_response_schema: Option<bool>,
    metadata: Option<bool>,
    x_cs_useruuid: Option<&str>,
) -> Result<models::ApidomainPeriodQueryResponseWrapperV1, Error<CreateSavedSearchesExecuteV1Error>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches/execute/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = detailed {
        local_var_req_builder =
            local_var_req_builder.query(&[("detailed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_test_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("include_test_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = match_response_schema {
        local_var_req_builder =
            local_var_req_builder.query(&[("match_response_schema", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = metadata {
        local_var_req_builder =
            local_var_req_builder.query(&[("metadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_cs_useruuid {
        local_var_req_builder =
            local_var_req_builder.header("X-CS-USERUUID", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSavedSearchesExecuteV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_saved_searches_ingest_alt_v1(
    configuration: &configuration::Configuration,
    app_id: Option<&str>,
) -> Result<
    models::ClientPeriodDataIngestResponseWrapperV1,
    Error<CreateSavedSearchesIngestAltV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches-ingest/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSavedSearchesIngestAltV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_saved_searches_ingest_v1(
    configuration: &configuration::Configuration,
    app_id: Option<&str>,
) -> Result<models::ClientPeriodDataIngestResponseWrapperV1, Error<CreateSavedSearchesIngestV1Error>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches/ingest/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSavedSearchesIngestV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_saved_searches_execute_alt_v1(
    configuration: &configuration::Configuration,
    job_id: &str,
    app_id: Option<&str>,
    infer_json_types: Option<bool>,
    job_status_only: Option<bool>,
    limit: Option<&str>,
    match_response_schema: Option<bool>,
    metadata: Option<bool>,
    offset: Option<&str>,
    x_cs_useruuid: Option<&str>,
) -> Result<models::ApidomainPeriodQueryResponseWrapperV1, Error<GetSavedSearchesExecuteAltV1Error>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches-execute/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("job_id", &job_id.to_string())]);
    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = job_status_only {
        local_var_req_builder =
            local_var_req_builder.query(&[("job_status_only", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = match_response_schema {
        local_var_req_builder =
            local_var_req_builder.query(&[("match_response_schema", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = metadata {
        local_var_req_builder =
            local_var_req_builder.query(&[("metadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_cs_useruuid {
        local_var_req_builder =
            local_var_req_builder.header("X-CS-USERUUID", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSavedSearchesExecuteAltV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_saved_searches_execute_v1(
    configuration: &configuration::Configuration,
    job_id: &str,
    app_id: Option<&str>,
    infer_json_types: Option<bool>,
    job_status_only: Option<bool>,
    limit: Option<&str>,
    match_response_schema: Option<bool>,
    metadata: Option<bool>,
    offset: Option<&str>,
    x_cs_useruuid: Option<&str>,
) -> Result<models::ApidomainPeriodQueryResponseWrapperV1, Error<GetSavedSearchesExecuteV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches/execute/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("job_id", &job_id.to_string())]);
    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = job_status_only {
        local_var_req_builder =
            local_var_req_builder.query(&[("job_status_only", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = match_response_schema {
        local_var_req_builder =
            local_var_req_builder.query(&[("match_response_schema", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = metadata {
        local_var_req_builder =
            local_var_req_builder.query(&[("metadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_cs_useruuid {
        local_var_req_builder =
            local_var_req_builder.header("X-CS-USERUUID", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSavedSearchesExecuteV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_saved_searches_job_results_download_alt_v1(
    configuration: &configuration::Configuration,
    job_id: &str,
    infer_json_types: Option<bool>,
    result_format: Option<&str>,
) -> Result<std::path::PathBuf, Error<GetSavedSearchesJobResultsDownloadAltV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches-job-results-download/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("job_id", &job_id.to_string())]);
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = result_format {
        local_var_req_builder =
            local_var_req_builder.query(&[("result_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSavedSearchesJobResultsDownloadAltV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_saved_searches_job_results_download_v1(
    configuration: &configuration::Configuration,
    job_id: &str,
    infer_json_types: Option<bool>,
    result_format: Option<&str>,
) -> Result<std::path::PathBuf, Error<GetSavedSearchesJobResultsDownloadV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/saved-searches/job-results-download/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("job_id", &job_id.to_string())]);
    if let Some(ref local_var_str) = infer_json_types {
        local_var_req_builder =
            local_var_req_builder.query(&[("infer_json_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = result_format {
        local_var_req_builder =
            local_var_req_builder.query(&[("result_format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSavedSearchesJobResultsDownloadV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn ingest_data_async_v1(
    configuration: &configuration::Configuration,
    data_content: Option<&str>,
    _data_file: Option<std::path::PathBuf>,
    repo: Option<&str>,
    tag: Option<Vec<String>>,
    tag_source: Option<&str>,
    test_data: Option<bool>,
) -> Result<models::ClientPeriodDataIngestResponseWrapperV1, Error<IngestDataAsyncV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/data-ingestion/ingest-async/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = data_content {
        local_var_form = local_var_form.text("data_content", local_var_param_value.to_string());
    }
    // TODO: support file upload for 'data_file' parameter
    if let Some(local_var_param_value) = repo {
        local_var_form = local_var_form.text("repo", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = tag {
        local_var_form = local_var_form.text(
            "tag",
            local_var_param_value
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        );
    }
    if let Some(local_var_param_value) = tag_source {
        local_var_form = local_var_form.text("tag_source", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = test_data {
        local_var_form = local_var_form.text("test_data", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IngestDataAsyncV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn ingest_data_v1(
    configuration: &configuration::Configuration,
    data_content: Option<&str>,
    _data_file: Option<std::path::PathBuf>,
    tag: Option<Vec<String>>,
    tag_source: Option<&str>,
    test_data: Option<bool>,
) -> Result<models::ClientPeriodDataIngestResponseWrapperV1, Error<IngestDataV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/data-ingestion/ingest/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = data_content {
        local_var_form = local_var_form.text("data_content", local_var_param_value.to_string());
    }
    // TODO: support file upload for 'data_file' parameter
    if let Some(local_var_param_value) = tag {
        local_var_form = local_var_form.text(
            "tag",
            local_var_param_value
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        );
    }
    if let Some(local_var_param_value) = tag_source {
        local_var_form = local_var_form.text("tag_source", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = test_data {
        local_var_form = local_var_form.text("test_data", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IngestDataV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_repos_v1(
    configuration: &configuration::Configuration,
    check_test_data: Option<bool>,
) -> Result<models::ApidomainPeriodRepoViewListItemWrapperV1, Error<ListReposV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/combined/repos/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = check_test_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("check_test_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListReposV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_view_v1(
    configuration: &configuration::Configuration,
    check_test_data: Option<bool>,
) -> Result<models::ApidomainPeriodRepoViewListItemWrapperV1, Error<ListViewV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/loggingapi/entities/views/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = check_test_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("check_test_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListViewV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
