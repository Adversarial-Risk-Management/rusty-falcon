/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::de::Error as _;

/// struct for typed errors of method [`get_lookup_from_package_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLookupFromPackageV1Error {
    Status401(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_lookup_from_package_with_namespace_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLookupFromPackageWithNamespaceV1Error {
    Status401(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_lookup_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLookupV1Error {
    Status401(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_status_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchStatusV1Error {
    Status401(models::MsaspecPeriodResponseFields),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status404(),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`start_search_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StartSearchV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status401(models::MsaspecPeriodResponseFields),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stop_search_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopSearchV1Error {
    Status401(models::MsaspecPeriodResponseFields),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_lookup_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadLookupV1Error {
    Status400(models::MsaspecPeriodResponseFields),
    Status401(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

pub async fn get_lookup_from_package_v1(
    configuration: &configuration::Configuration,
    repository: &str,
    package: &str,
    filename: &str,
) -> Result<(), Error<GetLookupFromPackageV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repository = repository;
    let p_package = package;
    let p_filename = filename;

    let uri_str = format!(
        "{}/humio/api/v1/repositories/{repository}/files/{package}/{filename}",
        configuration.base_path,
        repository = crate::apis::urlencode(p_repository),
        package = crate::apis::urlencode(p_package),
        filename = crate::apis::urlencode(p_filename)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLookupFromPackageV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_lookup_from_package_with_namespace_v1(
    configuration: &configuration::Configuration,
    repository: &str,
    namespace: &str,
    package: &str,
    filename: &str,
) -> Result<(), Error<GetLookupFromPackageWithNamespaceV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repository = repository;
    let p_namespace = namespace;
    let p_package = package;
    let p_filename = filename;

    let uri_str = format!(
        "{}/humio/api/v1/repositories/{repository}/files/{namespace}/{package}/{filename}",
        configuration.base_path,
        repository = crate::apis::urlencode(p_repository),
        namespace = crate::apis::urlencode(p_namespace),
        package = crate::apis::urlencode(p_package),
        filename = crate::apis::urlencode(p_filename)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLookupFromPackageWithNamespaceV1Error> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_lookup_v1(
    configuration: &configuration::Configuration,
    repository: &str,
    filename: &str,
) -> Result<(), Error<GetLookupV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repository = repository;
    let p_filename = filename;

    let uri_str = format!(
        "{}/humio/api/v1/repositories/{repository}/files/{filename}",
        configuration.base_path,
        repository = crate::apis::urlencode(p_repository),
        filename = crate::apis::urlencode(p_filename)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLookupV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_search_status_v1(
    configuration: &configuration::Configuration,
    repository: &str,
    id: &str,
) -> Result<models::ApiPeriodQueryJobsResults, Error<GetSearchStatusV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repository = repository;
    let p_id = id;

    let uri_str = format!(
        "{}/humio/api/v1/repositories/{repository}/queryjobs/{id}",
        configuration.base_path,
        repository = crate::apis::urlencode(p_repository),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodQueryJobsResults`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodQueryJobsResults`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSearchStatusV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn start_search_v1(
    configuration: &configuration::Configuration,
    repository: &str,
    body: models::ApiPeriodQueryJobInput,
) -> Result<models::ApiPeriodQueryJobResponse, Error<StartSearchV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repository = repository;
    let p_body = body;

    let uri_str = format!(
        "{}/humio/api/v1/repositories/{repository}/queryjobs",
        configuration.base_path,
        repository = crate::apis::urlencode(p_repository)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodQueryJobResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodQueryJobResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StartSearchV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn stop_search_v1(
    configuration: &configuration::Configuration,
    repository: &str,
    id: &str,
) -> Result<(), Error<StopSearchV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repository = repository;
    let p_id = id;

    let uri_str = format!(
        "{}/humio/api/v1/repositories/{repository}/queryjobs/{id}",
        configuration.base_path,
        repository = crate::apis::urlencode(p_repository),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<StopSearchV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn upload_lookup_v1(
    configuration: &configuration::Configuration,
    repository: &str,
    file: std::path::PathBuf,
) -> Result<(), Error<UploadLookupV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_repository = repository;
    let _p_file = file;

    let uri_str = format!(
        "{}/humio/api/v1/repositories/{repository}/files",
        configuration.base_path,
        repository = crate::apis::urlencode(p_repository)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let multipart_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<UploadLookupV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
