/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`azure_download_certificate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AzureDownloadCertificateError {
    Status400(models::RegistrationPeriodAzureDownloadCertificateResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureDownloadCertificateResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`azure_refresh_certificate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AzureRefreshCertificateError {
    Status400(models::RegistrationPeriodAzureDownloadCertificateResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureDownloadCertificateResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`connect_cspmgcp_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConnectCspmgcpAccountError {
    Status400(models::RegistrationPeriodGcpAccountResponseExtV2),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status409(models::RegistrationPeriodGcpAccountResponseExtV2),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpAccountResponseExtV2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_cspm_aws_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCspmAwsAccountError {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status409(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_cspm_azure_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCspmAzureAccountError {
    Status400(models::RegistrationPeriodAzureAccountResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status409(models::RegistrationPeriodAzureAccountResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_cspm_azure_management_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCspmAzureManagementGroupError {
    Status400(models::RegistrationPeriodAzureAccountResponseV1),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_cspmgcp_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCspmgcpAccountError {
    Status400(models::RegistrationPeriodGcpAccountResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_cspm_aws_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCspmAwsAccountError {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_cspm_azure_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCspmAzureAccountError {
    Status400(models::MsaPeriodBaseEntitiesResponse),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status404(models::MsaPeriodBaseEntitiesResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_cspm_azure_management_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCspmAzureManagementGroupError {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_cspmgcp_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCspmgcpAccountError {
    Status400(models::MsaPeriodBaseEntitiesResponse),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaPeriodBaseEntitiesResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_behavior_detections`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBehaviorDetectionsError {
    Status400(models::RegistrationPeriodExternalIoaEventResponse),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodExternalIoaEventResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cloud_event_ids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCloudEventIdsError {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_configuration_detection_entities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConfigurationDetectionEntitiesError {
    Status400(models::MsaPeriodReplyMetaOnly),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaPeriodReplyMetaOnly),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_configuration_detection_ids_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConfigurationDetectionIdsV2Error {
    Status400(models::MsaspecPeriodMetaInfo),
    Status403(models::MsaspecPeriodMetaInfo),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodMetaInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_configuration_detections`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConfigurationDetectionsError {
    Status400(models::RegistrationPeriodExternalIomEventResponse),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaPeriodReplyMetaOnly),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_aws_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmAwsAccountError {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_aws_console_setup_urls`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmAwsConsoleSetupUrlsError {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_azure_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmAzureAccountError {
    Status400(models::RegistrationPeriodAzureAccountResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_azure_management_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmAzureManagementGroupError {
    Status400(models::RegistrationPeriodAzureManagementGroupResponseV1),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureManagementGroupResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_azure_user_scripts_attachment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmAzureUserScriptsAttachmentError {
    Status400(models::RegistrationPeriodAzureProvisionGetUserScriptResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureProvisionGetUserScriptResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_policies_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmPoliciesDetailsError {
    Status400(models::RegistrationPeriodPolicyResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodPolicyResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_policy`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmPolicyError {
    Status400(models::RegistrationPeriodPolicyResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodPolicyResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_policy_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmPolicySettingsError {
    Status400(models::RegistrationPeriodPolicySettingsResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodPolicySettingsResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspm_scan_schedule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmScanScheduleError {
    Status400(models::RegistrationPeriodScanScheduleResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodScanScheduleResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspmcgp_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmcgpAccountError {
    Status400(models::RegistrationPeriodGcpAccountResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspmgcp_service_accounts_ext`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmgcpServiceAccountsExtError {
    Status400(models::RegistrationPeriodGcpServiceAccountResponseExtV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpServiceAccountResponseExtV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspmgcp_user_scripts_attachment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmgcpUserScriptsAttachmentError {
    Status400(models::RegistrationPeriodGcpProvisionGetUserScriptResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpProvisionGetUserScriptResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cspmgcp_validate_accounts_ext`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCspmgcpValidateAccountsExtError {
    Status400(models::RegistrationPeriodGcpAccountValidationResponseV1),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::RegistrationPeriodGcpAccountValidationResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpAccountValidationResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`patch_cspm_aws_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PatchCspmAwsAccountError {
    Status400(models::MsaspecPeriodResponseFields),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodResponseFields),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_cspm_azure_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCspmAzureAccountError {
    Status400(models::RegistrationPeriodAzureAccountResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_cspm_azure_account_client_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCspmAzureAccountClientIdError {
    Status400(models::RegistrationPeriodAzureTenantConfigurationResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureTenantConfigurationResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_cspm_azure_tenant_default_subscription_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCspmAzureTenantDefaultSubscriptionIdError {
    Status400(models::RegistrationPeriodAzureTenantDefaultSubscriptionIdResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodAzureTenantDefaultSubscriptionIdResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_cspm_policy_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCspmPolicySettingsError {
    Status400(models::RegistrationPeriodPolicySettingsResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodPolicySettingsResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_cspm_scan_schedule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCspmScanScheduleError {
    Status400(models::RegistrationPeriodScanScheduleResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodScanScheduleResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_cspmgcp_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCspmgcpAccountError {
    Status400(models::RegistrationPeriodGcpAccountResponseV1),
    Status403(models::MsaPeriodReplyMetaOnly),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpAccountResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_cspmgcp_service_accounts_ext`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCspmgcpServiceAccountsExtError {
    Status400(models::RegistrationPeriodGcpServiceAccountResponseExtV1),
    Status403(models::MsaspecPeriodResponseFields),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpServiceAccountResponseExtV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`validate_cspmgcp_service_account_ext`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ValidateCspmgcpServiceAccountExtError {
    Status400(models::RegistrationPeriodGcpServiceAccountValidationResponseV1),
    Status403(models::MsaspecPeriodResponseFields),
    Status404(models::RegistrationPeriodGcpServiceAccountValidationResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::RegistrationPeriodGcpServiceAccountValidationResponseV1),
    UnknownValue(serde_json::Value),
}


pub async fn azure_download_certificate(configuration: &configuration::Configuration, tenant_id: Vec<String>) -> Result<models::RegistrationPeriodAzureDownloadCertificateResponseV1, Error<AzureDownloadCertificateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_id = tenant_id;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/download-certificate/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_tenant_id.into_iter().map(|p| ("tenant_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("tenant_id", &p_tenant_id.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureDownloadCertificateResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureDownloadCertificateResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AzureDownloadCertificateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn azure_refresh_certificate(configuration: &configuration::Configuration, tenant_id: Vec<String>, years_valid: Option<&str>) -> Result<models::RegistrationPeriodAzureDownloadCertificateResponseV1, Error<AzureRefreshCertificateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_id = tenant_id;
    let p_years_valid = years_valid;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/refresh-certificate/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_tenant_id.into_iter().map(|p| ("tenant_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("tenant_id", &p_tenant_id.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_years_valid {
        req_builder = req_builder.query(&[("years_valid", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureDownloadCertificateResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureDownloadCertificateResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AzureRefreshCertificateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn connect_cspmgcp_account(configuration: &configuration::Configuration, body: models::RegistrationPeriodGcpAccountExtRequestV2) -> Result<models::RegistrationPeriodGcpAccountResponseExtV2, Error<ConnectCspmgcpAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/account/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseExtV2`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseExtV2`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ConnectCspmgcpAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn create_cspm_aws_account(configuration: &configuration::Configuration, body: models::RegistrationPeriodAwsAccountCreateRequestExtV2) -> Result<models::RegistrationPeriodAwsAccountResponseV2, Error<CreateCspmAwsAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-aws/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAwsAccountResponseV2`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAwsAccountResponseV2`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateCspmAwsAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn create_cspm_azure_account(configuration: &configuration::Configuration, body: models::RegistrationPeriodAzureAccountCreateRequestExternalV1) -> Result<models::RegistrationPeriodAzureAccountResponseV1, Error<CreateCspmAzureAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateCspmAzureAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn create_cspm_azure_management_group(configuration: &configuration::Configuration, body: models::RegistrationPeriodAzureManagementGroupCreateRequestExternalV1) -> Result<models::RegistrationPeriodAzureAccountResponseV1, Error<CreateCspmAzureManagementGroupError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/management-group/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateCspmAzureManagementGroupError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn create_cspmgcp_account(configuration: &configuration::Configuration, body: models::RegistrationPeriodGcpAccountCreateRequestExtV1) -> Result<models::RegistrationPeriodGcpAccountResponseV1, Error<CreateCspmgcpAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateCspmgcpAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_cspm_aws_account(configuration: &configuration::Configuration, ids: Option<Vec<String>>, organization_ids: Option<Vec<String>>) -> Result<models::MsaspecPeriodResponseFields, Error<DeleteCspmAwsAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;
    let p_organization_ids = organization_ids;

    let uri_str = format!("{}/cloud-connect-cspm-aws/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_organization_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("organization-ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("organization-ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaspecPeriodResponseFields`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaspecPeriodResponseFields`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCspmAwsAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_cspm_azure_account(configuration: &configuration::Configuration, ids: Option<Vec<String>>, tenant_ids: Option<Vec<String>>, retain_tenant: Option<&str>) -> Result<models::MsaPeriodBaseEntitiesResponse, Error<DeleteCspmAzureAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;
    let p_tenant_ids = tenant_ids;
    let p_retain_tenant = retain_tenant;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_tenant_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("tenant_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("tenant_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_retain_tenant {
        req_builder = req_builder.query(&[("retain_tenant", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaPeriodBaseEntitiesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaPeriodBaseEntitiesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCspmAzureAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_cspm_azure_management_group(configuration: &configuration::Configuration, tenant_ids: Option<Vec<String>>) -> Result<models::MsaspecPeriodResponseFields, Error<DeleteCspmAzureManagementGroupError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_ids = tenant_ids;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/management-group/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_tenant_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("tenant_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("tenant_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaspecPeriodResponseFields`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaspecPeriodResponseFields`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCspmAzureManagementGroupError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_cspmgcp_account(configuration: &configuration::Configuration, ids: Option<Vec<String>>) -> Result<models::MsaPeriodBaseEntitiesResponse, Error<DeleteCspmgcpAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaPeriodBaseEntitiesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaPeriodBaseEntitiesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCspmgcpAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_behavior_detections(configuration: &configuration::Configuration, cloud_provider: Option<&str>, service: Option<&str>, account_id: Option<&str>, aws_account_id: Option<&str>, azure_subscription_id: Option<&str>, azure_tenant_id: Option<&str>, state: Option<&str>, date_time_since: Option<&str>, since: Option<&str>, severity: Option<&str>, next_token: Option<&str>, limit: Option<i32>, resource_id: Option<Vec<String>>, resource_uuid: Option<Vec<String>>) -> Result<models::RegistrationPeriodExternalIoaEventResponse, Error<GetBehaviorDetectionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cloud_provider = cloud_provider;
    let p_service = service;
    let p_account_id = account_id;
    let p_aws_account_id = aws_account_id;
    let p_azure_subscription_id = azure_subscription_id;
    let p_azure_tenant_id = azure_tenant_id;
    let p_state = state;
    let p_date_time_since = date_time_since;
    let p_since = since;
    let p_severity = severity;
    let p_next_token = next_token;
    let p_limit = limit;
    let p_resource_id = resource_id;
    let p_resource_uuid = resource_uuid;

    let uri_str = format!("{}/detects/entities/ioa/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_cloud_provider {
        req_builder = req_builder.query(&[("cloud_provider", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_service {
        req_builder = req_builder.query(&[("service", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_aws_account_id {
        req_builder = req_builder.query(&[("aws_account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_azure_subscription_id {
        req_builder = req_builder.query(&[("azure_subscription_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_azure_tenant_id {
        req_builder = req_builder.query(&[("azure_tenant_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_state {
        req_builder = req_builder.query(&[("state", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_date_time_since {
        req_builder = req_builder.query(&[("date_time_since", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_since {
        req_builder = req_builder.query(&[("since", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_severity {
        req_builder = req_builder.query(&[("severity", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_next_token {
        req_builder = req_builder.query(&[("next_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_resource_id {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("resource_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("resource_id", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_resource_uuid {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("resource_uuid".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("resource_uuid", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodExternalIoaEventResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodExternalIoaEventResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBehaviorDetectionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cloud_event_ids(configuration: &configuration::Configuration, x_cs_useruuid: &str, id: &str) -> Result<models::CdrioamanagerPeriodGetCloudEventIdsResponse, Error<GetCloudEventIdsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_x_cs_useruuid = x_cs_useruuid;
    let p_id = id;

    let uri_str = format!("{}/detects/queries/cloud-events/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("id", &p_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("X-CS-USERUUID", p_x_cs_useruuid.to_string());
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CdrioamanagerPeriodGetCloudEventIdsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CdrioamanagerPeriodGetCloudEventIdsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCloudEventIdsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_configuration_detection_entities(configuration: &configuration::Configuration, ids: Vec<String>) -> Result<models::RegistrationPeriodExternalIomEventResponseV2, Error<GetConfigurationDetectionEntitiesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/detects/entities/iom/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_ids.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("ids", &p_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodExternalIomEventResponseV2`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodExternalIomEventResponseV2`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetConfigurationDetectionEntitiesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_configuration_detection_ids_v2(configuration: &configuration::Configuration, filter: Option<&str>, sort: Option<&str>, limit: Option<i32>, offset: Option<i32>, next_token: Option<&str>) -> Result<models::RegistrationPeriodIomEventIdsResponseV2, Error<GetConfigurationDetectionIdsV2Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;
    let p_sort = sort;
    let p_limit = limit;
    let p_offset = offset;
    let p_next_token = next_token;

    let uri_str = format!("{}/detects/queries/iom/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_next_token {
        req_builder = req_builder.query(&[("next_token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodIomEventIdsResponseV2`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodIomEventIdsResponseV2`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetConfigurationDetectionIdsV2Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_configuration_detections(configuration: &configuration::Configuration, cloud_provider: Option<&str>, account_id: Option<&str>, azure_subscription_id: Option<&str>, azure_tenant_id: Option<&str>, status: Option<&str>, region: Option<&str>, severity: Option<&str>, service: Option<&str>, next_token: Option<&str>, limit: Option<i32>) -> Result<models::RegistrationPeriodExternalIomEventResponse, Error<GetConfigurationDetectionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cloud_provider = cloud_provider;
    let p_account_id = account_id;
    let p_azure_subscription_id = azure_subscription_id;
    let p_azure_tenant_id = azure_tenant_id;
    let p_status = status;
    let p_region = region;
    let p_severity = severity;
    let p_service = service;
    let p_next_token = next_token;
    let p_limit = limit;

    let uri_str = format!("{}/detects/entities/iom/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_cloud_provider {
        req_builder = req_builder.query(&[("cloud_provider", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_azure_subscription_id {
        req_builder = req_builder.query(&[("azure_subscription_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_azure_tenant_id {
        req_builder = req_builder.query(&[("azure_tenant_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_region {
        req_builder = req_builder.query(&[("region", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_severity {
        req_builder = req_builder.query(&[("severity", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_service {
        req_builder = req_builder.query(&[("service", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_next_token {
        req_builder = req_builder.query(&[("next_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodExternalIomEventResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodExternalIomEventResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetConfigurationDetectionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_aws_account(configuration: &configuration::Configuration, scan_type: Option<&str>, ids: Option<Vec<String>>, iam_role_arns: Option<Vec<String>>, organization_ids: Option<Vec<String>>, status: Option<&str>, limit: Option<i32>, cspm_lite: Option<&str>, migrated: Option<&str>, offset: Option<i32>, group_by: Option<&str>) -> Result<models::RegistrationPeriodAwsAccountResponseV2, Error<GetCspmAwsAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_scan_type = scan_type;
    let p_ids = ids;
    let p_iam_role_arns = iam_role_arns;
    let p_organization_ids = organization_ids;
    let p_status = status;
    let p_limit = limit;
    let p_cspm_lite = cspm_lite;
    let p_migrated = migrated;
    let p_offset = offset;
    let p_group_by = group_by;

    let uri_str = format!("{}/cloud-connect-cspm-aws/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_scan_type {
        req_builder = req_builder.query(&[("scan-type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_iam_role_arns {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("iam_role_arns".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("iam_role_arns", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_organization_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("organization-ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("organization-ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_cspm_lite {
        req_builder = req_builder.query(&[("cspm_lite", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_migrated {
        req_builder = req_builder.query(&[("migrated", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_group_by {
        req_builder = req_builder.query(&[("group_by", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAwsAccountResponseV2`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAwsAccountResponseV2`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmAwsAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_aws_console_setup_urls(configuration: &configuration::Configuration, ids: Option<Vec<String>>, use_existing_cloudtrail: Option<&str>, region: Option<&str>, tags: Option<&str>, template: Option<&str>) -> Result<models::RegistrationPeriodAwsConsoleUrlResponseV2, Error<GetCspmAwsConsoleSetupUrlsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;
    let p_use_existing_cloudtrail = use_existing_cloudtrail;
    let p_region = region;
    let p_tags = tags;
    let p_template = template;

    let uri_str = format!("{}/cloud-connect-cspm-aws/entities/console-setup-urls/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_use_existing_cloudtrail {
        req_builder = req_builder.query(&[("use_existing_cloudtrail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_region {
        req_builder = req_builder.query(&[("region", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tags {
        req_builder = req_builder.query(&[("tags", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_template {
        req_builder = req_builder.query(&[("template", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAwsConsoleUrlResponseV2`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAwsConsoleUrlResponseV2`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmAwsConsoleSetupUrlsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_azure_account(configuration: &configuration::Configuration, ids: Option<Vec<String>>, tenant_ids: Option<Vec<String>>, scan_type: Option<&str>, status: Option<&str>, cspm_lite: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<models::RegistrationPeriodAzureAccountResponseV1, Error<GetCspmAzureAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;
    let p_tenant_ids = tenant_ids;
    let p_scan_type = scan_type;
    let p_status = status;
    let p_cspm_lite = cspm_lite;
    let p_limit = limit;
    let p_offset = offset;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_tenant_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("tenant_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("tenant_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_scan_type {
        req_builder = req_builder.query(&[("scan-type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_cspm_lite {
        req_builder = req_builder.query(&[("cspm_lite", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmAzureAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_azure_management_group(configuration: &configuration::Configuration, tenant_ids: Option<Vec<String>>, limit: Option<i32>, offset: Option<i32>) -> Result<models::RegistrationPeriodAzureManagementGroupResponseV1, Error<GetCspmAzureManagementGroupError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_ids = tenant_ids;
    let p_limit = limit;
    let p_offset = offset;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/management-group/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_tenant_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("tenant_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("tenant_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureManagementGroupResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureManagementGroupResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmAzureManagementGroupError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_azure_user_scripts_attachment(configuration: &configuration::Configuration, tenant_id: Option<&str>, subscription_ids: Option<Vec<String>>, account_type: Option<&str>, template: Option<&str>, azure_management_group: Option<bool>) -> Result<models::RegistrationPeriodAzureProvisionGetUserScriptResponseV1, Error<GetCspmAzureUserScriptsAttachmentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_id = tenant_id;
    let p_subscription_ids = subscription_ids;
    let p_account_type = account_type;
    let p_template = template;
    let p_azure_management_group = azure_management_group;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/user-scripts-download/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_tenant_id {
        req_builder = req_builder.query(&[("tenant-id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_subscription_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("subscription_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("subscription_ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_account_type {
        req_builder = req_builder.query(&[("account_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_template {
        req_builder = req_builder.query(&[("template", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_azure_management_group {
        req_builder = req_builder.query(&[("azure_management_group", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureProvisionGetUserScriptResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureProvisionGetUserScriptResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmAzureUserScriptsAttachmentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_policies_details(configuration: &configuration::Configuration, ids: Vec<i32>) -> Result<models::RegistrationPeriodPolicyResponseV1, Error<GetCspmPoliciesDetailsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/settings/entities/policy-details/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_ids.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("ids", &p_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodPolicyResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodPolicyResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmPoliciesDetailsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_policy(configuration: &configuration::Configuration, ids: i32) -> Result<models::RegistrationPeriodPolicyResponseV1, Error<GetCspmPolicyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/settings/entities/policy-details/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("ids", &p_ids.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodPolicyResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodPolicyResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmPolicyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_policy_settings(configuration: &configuration::Configuration, service: Option<&str>, policy_id: Option<&str>, cloud_platform: Option<&str>) -> Result<models::RegistrationPeriodPolicySettingsResponseV1, Error<GetCspmPolicySettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_service = service;
    let p_policy_id = policy_id;
    let p_cloud_platform = cloud_platform;

    let uri_str = format!("{}/settings/entities/policy/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_service {
        req_builder = req_builder.query(&[("service", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_policy_id {
        req_builder = req_builder.query(&[("policy-id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_cloud_platform {
        req_builder = req_builder.query(&[("cloud-platform", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodPolicySettingsResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodPolicySettingsResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmPolicySettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspm_scan_schedule(configuration: &configuration::Configuration, cloud_platform: Option<Vec<String>>) -> Result<models::RegistrationPeriodScanScheduleResponseV1, Error<GetCspmScanScheduleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cloud_platform = cloud_platform;

    let uri_str = format!("{}/settings/scan-schedule/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_cloud_platform {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("cloud-platform".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("cloud-platform", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodScanScheduleResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodScanScheduleResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmScanScheduleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspmcgp_account(configuration: &configuration::Configuration, parent_type: Option<&str>, ids: Option<Vec<String>>, scan_type: Option<&str>, status: Option<&str>, limit: Option<i32>, offset: Option<i32>, sort: Option<&str>) -> Result<models::RegistrationPeriodGcpAccountResponseV1, Error<GetCspmcgpAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_parent_type = parent_type;
    let p_ids = ids;
    let p_scan_type = scan_type;
    let p_status = status;
    let p_limit = limit;
    let p_offset = offset;
    let p_sort = sort;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_parent_type {
        req_builder = req_builder.query(&[("parent_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_scan_type {
        req_builder = req_builder.query(&[("scan-type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmcgpAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspmgcp_service_accounts_ext(configuration: &configuration::Configuration, id: Option<&str>) -> Result<models::RegistrationPeriodGcpServiceAccountResponseExtV1, Error<GetCspmgcpServiceAccountsExtError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/service-accounts/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpServiceAccountResponseExtV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpServiceAccountResponseExtV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmgcpServiceAccountsExtError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspmgcp_user_scripts_attachment(configuration: &configuration::Configuration, parent_type: Option<&str>, ids: Option<Vec<String>>) -> Result<models::RegistrationPeriodGcpProvisionGetUserScriptResponseV1, Error<GetCspmgcpUserScriptsAttachmentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_parent_type = parent_type;
    let p_ids = ids;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/user-scripts-download/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_parent_type {
        req_builder = req_builder.query(&[("parent_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("ids", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpProvisionGetUserScriptResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpProvisionGetUserScriptResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmgcpUserScriptsAttachmentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_cspmgcp_validate_accounts_ext(configuration: &configuration::Configuration, body: models::RegistrationPeriodGcpAccountValidationRequestV1) -> Result<models::RegistrationPeriodGcpAccountValidationResponseV1, Error<GetCspmgcpValidateAccountsExtError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/account/validate/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountValidationResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountValidationResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCspmgcpValidateAccountsExtError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn patch_cspm_aws_account(configuration: &configuration::Configuration, body: models::RegistrationPeriodAwsAccountPatchRequest) -> Result<models::RegistrationPeriodAwsAccountResponseV2, Error<PatchCspmAwsAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-aws/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAwsAccountResponseV2`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAwsAccountResponseV2`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PatchCspmAwsAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_cspm_azure_account(configuration: &configuration::Configuration, body: models::RegistrationPeriodAzureAccountPatchRequest) -> Result<models::RegistrationPeriodAzureAccountResponseV1, Error<UpdateCspmAzureAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureAccountResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCspmAzureAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_cspm_azure_account_client_id(configuration: &configuration::Configuration, id: &str, tenant_id: Option<&str>) -> Result<models::RegistrationPeriodAzureTenantConfigurationResponseV1, Error<UpdateCspmAzureAccountClientIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_tenant_id = tenant_id;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/client-id/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    req_builder = req_builder.query(&[("id", &p_id.to_string())]);
    if let Some(ref param_value) = p_tenant_id {
        req_builder = req_builder.query(&[("tenant-id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureTenantConfigurationResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureTenantConfigurationResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCspmAzureAccountClientIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_cspm_azure_tenant_default_subscription_id(configuration: &configuration::Configuration, subscription_id: &str, tenant_id: Option<&str>) -> Result<models::RegistrationPeriodAzureTenantDefaultSubscriptionIdResponseV1, Error<UpdateCspmAzureTenantDefaultSubscriptionIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_subscription_id = subscription_id;
    let p_tenant_id = tenant_id;

    let uri_str = format!("{}/cloud-connect-cspm-azure/entities/default-subscription-id/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref param_value) = p_tenant_id {
        req_builder = req_builder.query(&[("tenant-id", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("subscription_id", &p_subscription_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodAzureTenantDefaultSubscriptionIdResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodAzureTenantDefaultSubscriptionIdResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCspmAzureTenantDefaultSubscriptionIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_cspm_policy_settings(configuration: &configuration::Configuration, body: models::RegistrationPeriodPolicyRequestExtV1) -> Result<models::RegistrationPeriodPolicySettingsResponseV1, Error<UpdateCspmPolicySettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/settings/entities/policy/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodPolicySettingsResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodPolicySettingsResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCspmPolicySettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_cspm_scan_schedule(configuration: &configuration::Configuration, body: models::RegistrationPeriodScanScheduleUpdateRequestV1) -> Result<models::RegistrationPeriodScanScheduleResponseV1, Error<UpdateCspmScanScheduleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/settings/scan-schedule/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodScanScheduleResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodScanScheduleResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCspmScanScheduleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_cspmgcp_account(configuration: &configuration::Configuration, body: models::RegistrationPeriodGcpAccountPatchRequestV1) -> Result<models::RegistrationPeriodGcpAccountResponseV1, Error<UpdateCspmgcpAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/account/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpAccountResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCspmgcpAccountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_cspmgcp_service_accounts_ext(configuration: &configuration::Configuration, body: models::RegistrationPeriodGcpServiceAccountPatchRequestV1) -> Result<models::RegistrationPeriodGcpServiceAccountResponseExtV1, Error<UpdateCspmgcpServiceAccountsExtError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/service-accounts/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpServiceAccountResponseExtV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpServiceAccountResponseExtV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCspmgcpServiceAccountsExtError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn validate_cspmgcp_service_account_ext(configuration: &configuration::Configuration, body: models::RegistrationPeriodGcpServiceAccountValidationRequestV1) -> Result<models::RegistrationPeriodGcpServiceAccountValidationResponseV1, Error<ValidateCspmgcpServiceAccountExtError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/cloud-connect-cspm-gcp/entities/service-accounts/validate/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegistrationPeriodGcpServiceAccountValidationResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegistrationPeriodGcpServiceAccountValidationResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ValidateCspmgcpServiceAccountExtError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

