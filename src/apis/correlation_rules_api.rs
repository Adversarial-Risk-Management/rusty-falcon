/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;

/// struct for typed errors of method [`aggregates_period_rule_versions_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AggregatesPeriodRuleVersionsPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodAggregatesResponseV1),
    Status401(models::ApiPeriodAggregatesResponseV1),
    Status403(models::ApiPeriodAggregatesResponseV1),
    Status404(models::ApiPeriodAggregatesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodAggregatesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`combined_period_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CombinedPeriodRulesPeriodGetPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`combined_period_rules_period_get_period_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CombinedPeriodRulesPeriodGetPeriodV2Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_latest_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodLatestRulesPeriodGetPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_export_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsExportPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodJobLinkResponseV1),
    Status401(models::ApiPeriodJobLinkResponseV1),
    Status403(models::ApiPeriodJobLinkResponseV1),
    Status404(models::ApiPeriodJobLinkResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodJobLinkResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_import_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsImportPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status401(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status403(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status404(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_period_delete_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsPeriodDeletePeriodV1Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_publish_period_patch_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsPublishPeriodPatchPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status401(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status403(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status404(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status422(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_delete_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodDeletePeriodV1Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodGetPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_get_period_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodGetPeriodV2Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_patch_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodPatchPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status422(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`queries_period_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum QueriesPeriodRulesPeriodGetPeriodV1Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`queries_period_rules_period_get_period_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum QueriesPeriodRulesPeriodGetPeriodV2Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}

pub async fn aggregates_period_rule_versions_period_post_period_v1(
    configuration: &configuration::Configuration,
    ids: Vec<String>,
    body: Vec<serde_json::Value>,
    filter: Option<&str>,
) -> Result<
    models::ApiPeriodAggregatesResponseV1,
    Error<AggregatesPeriodRuleVersionsPeriodPostPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/aggregates/rule-versions/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = match "multi" {
        "multi" => local_var_req_builder.query(
            &ids.into_iter()
                .map(|p| ("ids".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => local_var_req_builder.query(&[(
            "ids",
            &ids.into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AggregatesPeriodRuleVersionsPeriodPostPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn combined_period_rules_period_get_period_v1(
    configuration: &configuration::Configuration,
    filter: Option<&str>,
    q: Option<&str>,
    sort: Option<&str>,
    offset: Option<i32>,
    limit: Option<i32>,
) -> Result<
    models::ApiPeriodGetEntitiesRulesResponseV1,
    Error<CombinedPeriodRulesPeriodGetPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/combined/rules/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CombinedPeriodRulesPeriodGetPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn combined_period_rules_period_get_period_v2(
    configuration: &configuration::Configuration,
    filter: Option<&str>,
    q: Option<&str>,
    sort: Option<&str>,
    offset: Option<i32>,
    limit: Option<i32>,
) -> Result<
    models::ApiPeriodGetEntitiesRulesResponseV1,
    Error<CombinedPeriodRulesPeriodGetPeriodV2Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/combined/rules/v2",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CombinedPeriodRulesPeriodGetPeriodV2Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_latest_rules_period_get_period_v1(
    configuration: &configuration::Configuration,
    rule_ids: Vec<String>,
) -> Result<
    models::ApiPeriodGetEntitiesRulesResponseV1,
    Error<EntitiesPeriodLatestRulesPeriodGetPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/latest-rules/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = match "multi" {
        "multi" => local_var_req_builder.query(
            &rule_ids
                .into_iter()
                .map(|p| ("rule_ids".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => local_var_req_builder.query(&[(
            "rule_ids",
            &rule_ids
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodLatestRulesPeriodGetPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rule_versions_export_period_post_period_v1(
    configuration: &configuration::Configuration,
    body: models::ApiPeriodRuleVersionReportRequest,
) -> Result<
    models::ApiPeriodJobLinkResponseV1,
    Error<EntitiesPeriodRuleVersionsExportPeriodPostPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rule-versions/export/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRuleVersionsExportPeriodPostPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rule_versions_import_period_post_period_v1(
    configuration: &configuration::Configuration,
) -> Result<
    models::ApiPeriodGetEntitiesRuleVersionsResponseV1,
    Error<EntitiesPeriodRuleVersionsImportPeriodPostPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rule-versions/import/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRuleVersionsImportPeriodPostPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rule_versions_period_delete_period_v1(
    configuration: &configuration::Configuration,
    ids: Vec<String>,
) -> Result<
    models::MsaspecPeriodQueryResponse,
    Error<EntitiesPeriodRuleVersionsPeriodDeletePeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rule-versions/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = match "multi" {
        "multi" => local_var_req_builder.query(
            &ids.into_iter()
                .map(|p| ("ids".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => local_var_req_builder.query(&[(
            "ids",
            &ids.into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRuleVersionsPeriodDeletePeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rule_versions_publish_period_patch_period_v1(
    configuration: &configuration::Configuration,
    body: models::ApiPeriodRuleVersionPublishRequestV1,
) -> Result<
    models::ApiPeriodGetEntitiesRuleVersionsResponseV1,
    Error<EntitiesPeriodRuleVersionsPublishPeriodPatchPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rule-versions/publish/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRuleVersionsPublishPeriodPatchPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rules_period_delete_period_v1(
    configuration: &configuration::Configuration,
    ids: Vec<String>,
) -> Result<models::MsaspecPeriodQueryResponse, Error<EntitiesPeriodRulesPeriodDeletePeriodV1Error>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rules/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = match "multi" {
        "multi" => local_var_req_builder.query(
            &ids.into_iter()
                .map(|p| ("ids".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => local_var_req_builder.query(&[(
            "ids",
            &ids.into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRulesPeriodDeletePeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rules_period_get_period_v1(
    configuration: &configuration::Configuration,
    ids: Vec<String>,
) -> Result<
    models::ApiPeriodGetEntitiesRulesResponseV1,
    Error<EntitiesPeriodRulesPeriodGetPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rules/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = match "multi" {
        "multi" => local_var_req_builder.query(
            &ids.into_iter()
                .map(|p| ("ids".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => local_var_req_builder.query(&[(
            "ids",
            &ids.into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRulesPeriodGetPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rules_period_get_period_v2(
    configuration: &configuration::Configuration,
    ids: Vec<String>,
) -> Result<
    models::ApiPeriodGetEntitiesRulesResponseV1,
    Error<EntitiesPeriodRulesPeriodGetPeriodV2Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rules/v2",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = match "multi" {
        "multi" => local_var_req_builder.query(
            &ids.into_iter()
                .map(|p| ("ids".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => local_var_req_builder.query(&[(
            "ids",
            &ids.into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRulesPeriodGetPeriodV2Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rules_period_patch_period_v1(
    configuration: &configuration::Configuration,
    body: Vec<models::ApiPeriodRulePatchRequestV1>,
) -> Result<
    models::ApiPeriodGetEntitiesRulesResponseV1,
    Error<EntitiesPeriodRulesPeriodPatchPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rules/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRulesPeriodPatchPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn entities_period_rules_period_post_period_v1(
    configuration: &configuration::Configuration,
    body: models::ApiPeriodRuleCreateRequestV1,
) -> Result<
    models::ApiPeriodGetEntitiesRulesResponseV1,
    Error<EntitiesPeriodRulesPeriodPostPeriodV1Error>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/entities/rules/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EntitiesPeriodRulesPeriodPostPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn queries_period_rules_period_get_period_v1(
    configuration: &configuration::Configuration,
    filter: Option<&str>,
    q: Option<&str>,
    sort: Option<&str>,
    offset: Option<i32>,
    limit: Option<i32>,
) -> Result<models::MsaspecPeriodQueryResponse, Error<QueriesPeriodRulesPeriodGetPeriodV1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/queries/rules/v1",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<QueriesPeriodRulesPeriodGetPeriodV1Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn queries_period_rules_period_get_period_v2(
    configuration: &configuration::Configuration,
    filter: Option<&str>,
    q: Option<&str>,
    sort: Option<&str>,
    offset: Option<i32>,
    limit: Option<i32>,
) -> Result<models::MsaspecPeriodQueryResponse, Error<QueriesPeriodRulesPeriodGetPeriodV2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/correlation-rules/queries/rules/v2",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<QueriesPeriodRulesPeriodGetPeriodV2Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
