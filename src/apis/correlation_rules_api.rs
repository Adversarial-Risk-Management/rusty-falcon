/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`aggregates_period_rule_versions_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AggregatesPeriodRuleVersionsPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodAggregatesResponseV1),
    Status401(models::ApiPeriodAggregatesResponseV1),
    Status403(models::ApiPeriodAggregatesResponseV1),
    Status404(models::ApiPeriodAggregatesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodAggregatesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`combined_period_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CombinedPeriodRulesPeriodGetPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`combined_period_rules_period_get_period_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CombinedPeriodRulesPeriodGetPeriodV2Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_latest_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodLatestRulesPeriodGetPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_export_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsExportPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodJobLinkResponseV1),
    Status401(models::ApiPeriodJobLinkResponseV1),
    Status403(models::ApiPeriodJobLinkResponseV1),
    Status404(models::ApiPeriodJobLinkResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodJobLinkResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_import_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsImportPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status401(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status403(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status404(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_period_delete_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsPeriodDeletePeriodV1Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rule_versions_publish_period_patch_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRuleVersionsPublishPeriodPatchPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status401(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status403(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status404(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status422(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRuleVersionsResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_delete_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodDeletePeriodV1Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodGetPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_get_period_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodGetPeriodV2Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_patch_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodPatchPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status422(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities_period_rules_period_post_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesPeriodRulesPeriodPostPeriodV1Error {
    Status400(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status401(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status403(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status404(models::ApiPeriodGetEntitiesRulesResponseV1),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::ApiPeriodGetEntitiesRulesResponseV1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`queries_period_rules_period_get_period_v1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum QueriesPeriodRulesPeriodGetPeriodV1Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`queries_period_rules_period_get_period_v2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum QueriesPeriodRulesPeriodGetPeriodV2Error {
    Status400(models::MsaspecPeriodQueryResponse),
    Status401(models::MsaspecPeriodQueryResponse),
    Status403(models::MsaspecPeriodQueryResponse),
    Status404(models::MsaspecPeriodQueryResponse),
    Status429(models::MsaPeriodReplyMetaOnly),
    Status500(models::MsaspecPeriodQueryResponse),
    UnknownValue(serde_json::Value),
}


pub async fn aggregates_period_rule_versions_period_post_period_v1(configuration: &configuration::Configuration, ids: Vec<String>, body: Vec<serde_json::Value>, filter: Option<&str>) -> Result<models::ApiPeriodAggregatesResponseV1, Error<AggregatesPeriodRuleVersionsPeriodPostPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;
    let p_body = body;
    let p_filter = filter;

    let uri_str = format!("{}/correlation-rules/aggregates/rule-versions/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_ids.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("ids", &p_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodAggregatesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodAggregatesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AggregatesPeriodRuleVersionsPeriodPostPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn combined_period_rules_period_get_period_v1(configuration: &configuration::Configuration, filter: Option<&str>, q: Option<&str>, sort: Option<&str>, offset: Option<i32>, limit: Option<i32>) -> Result<models::ApiPeriodGetEntitiesRulesResponseV1, Error<CombinedPeriodRulesPeriodGetPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;
    let p_q = q;
    let p_sort = sort;
    let p_offset = offset;
    let p_limit = limit;

    let uri_str = format!("{}/correlation-rules/combined/rules/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_q {
        req_builder = req_builder.query(&[("q", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CombinedPeriodRulesPeriodGetPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn combined_period_rules_period_get_period_v2(configuration: &configuration::Configuration, filter: Option<&str>, q: Option<&str>, sort: Option<&str>, offset: Option<i32>, limit: Option<i32>) -> Result<models::ApiPeriodGetEntitiesRulesResponseV1, Error<CombinedPeriodRulesPeriodGetPeriodV2Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;
    let p_q = q;
    let p_sort = sort;
    let p_offset = offset;
    let p_limit = limit;

    let uri_str = format!("{}/correlation-rules/combined/rules/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_q {
        req_builder = req_builder.query(&[("q", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CombinedPeriodRulesPeriodGetPeriodV2Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_latest_rules_period_get_period_v1(configuration: &configuration::Configuration, rule_ids: Vec<String>) -> Result<models::ApiPeriodGetEntitiesRulesResponseV1, Error<EntitiesPeriodLatestRulesPeriodGetPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_rule_ids = rule_ids;

    let uri_str = format!("{}/correlation-rules/entities/latest-rules/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_rule_ids.into_iter().map(|p| ("rule_ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("rule_ids", &p_rule_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodLatestRulesPeriodGetPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rule_versions_export_period_post_period_v1(configuration: &configuration::Configuration, body: models::ApiPeriodRuleVersionReportRequest) -> Result<models::ApiPeriodJobLinkResponseV1, Error<EntitiesPeriodRuleVersionsExportPeriodPostPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/correlation-rules/entities/rule-versions/export/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodJobLinkResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodJobLinkResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRuleVersionsExportPeriodPostPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rule_versions_import_period_post_period_v1(configuration: &configuration::Configuration, ) -> Result<models::ApiPeriodGetEntitiesRuleVersionsResponseV1, Error<EntitiesPeriodRuleVersionsImportPeriodPostPeriodV1Error>> {

    let uri_str = format!("{}/correlation-rules/entities/rule-versions/import/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRuleVersionsResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRuleVersionsResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRuleVersionsImportPeriodPostPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rule_versions_period_delete_period_v1(configuration: &configuration::Configuration, ids: Vec<String>) -> Result<models::MsaspecPeriodQueryResponse, Error<EntitiesPeriodRuleVersionsPeriodDeletePeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/correlation-rules/entities/rule-versions/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_ids.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("ids", &p_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRuleVersionsPeriodDeletePeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rule_versions_publish_period_patch_period_v1(configuration: &configuration::Configuration, body: models::ApiPeriodRuleVersionPublishRequestV1) -> Result<models::ApiPeriodGetEntitiesRuleVersionsResponseV1, Error<EntitiesPeriodRuleVersionsPublishPeriodPatchPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/correlation-rules/entities/rule-versions/publish/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRuleVersionsResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRuleVersionsResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRuleVersionsPublishPeriodPatchPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rules_period_delete_period_v1(configuration: &configuration::Configuration, ids: Vec<String>) -> Result<models::MsaspecPeriodQueryResponse, Error<EntitiesPeriodRulesPeriodDeletePeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/correlation-rules/entities/rules/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_ids.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("ids", &p_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRulesPeriodDeletePeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rules_period_get_period_v1(configuration: &configuration::Configuration, ids: Vec<String>) -> Result<models::ApiPeriodGetEntitiesRulesResponseV1, Error<EntitiesPeriodRulesPeriodGetPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/correlation-rules/entities/rules/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_ids.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("ids", &p_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRulesPeriodGetPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rules_period_get_period_v2(configuration: &configuration::Configuration, ids: Vec<String>) -> Result<models::ApiPeriodGetEntitiesRulesResponseV1, Error<EntitiesPeriodRulesPeriodGetPeriodV2Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ids = ids;

    let uri_str = format!("{}/correlation-rules/entities/rules/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "multi" {
        "multi" => req_builder.query(&p_ids.into_iter().map(|p| ("ids".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("ids", &p_ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRulesPeriodGetPeriodV2Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rules_period_patch_period_v1(configuration: &configuration::Configuration, body: Vec<models::ApiPeriodRulePatchRequestV1>) -> Result<models::ApiPeriodGetEntitiesRulesResponseV1, Error<EntitiesPeriodRulesPeriodPatchPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/correlation-rules/entities/rules/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRulesPeriodPatchPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn entities_period_rules_period_post_period_v1(configuration: &configuration::Configuration, body: models::ApiPeriodRuleCreateRequestV1) -> Result<models::ApiPeriodGetEntitiesRulesResponseV1, Error<EntitiesPeriodRulesPeriodPostPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/correlation-rules/entities/rules/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiPeriodGetEntitiesRulesResponseV1`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EntitiesPeriodRulesPeriodPostPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn queries_period_rules_period_get_period_v1(configuration: &configuration::Configuration, filter: Option<&str>, q: Option<&str>, sort: Option<&str>, offset: Option<i32>, limit: Option<i32>) -> Result<models::MsaspecPeriodQueryResponse, Error<QueriesPeriodRulesPeriodGetPeriodV1Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;
    let p_q = q;
    let p_sort = sort;
    let p_offset = offset;
    let p_limit = limit;

    let uri_str = format!("{}/correlation-rules/queries/rules/v1", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_q {
        req_builder = req_builder.query(&[("q", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<QueriesPeriodRulesPeriodGetPeriodV1Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn queries_period_rules_period_get_period_v2(configuration: &configuration::Configuration, filter: Option<&str>, q: Option<&str>, sort: Option<&str>, offset: Option<i32>, limit: Option<i32>) -> Result<models::MsaspecPeriodQueryResponse, Error<QueriesPeriodRulesPeriodGetPeriodV2Error>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_filter = filter;
    let p_q = q;
    let p_sort = sort;
    let p_offset = offset;
    let p_limit = limit;

    let uri_str = format!("{}/correlation-rules/queries/rules/v2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_q {
        req_builder = req_builder.query(&[("q", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MsaspecPeriodQueryResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<QueriesPeriodRulesPeriodGetPeriodV2Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

