/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelsPeriodContainer {
    #[serde(rename = "agents", skip_serializing_if = "Option::is_none")]
    pub agents: Option<Vec<std::collections::HashMap<String, String>>>,
    #[serde(
        rename = "allow_privilege_escalation",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(rename = "cid")]
    pub cid: String,
    #[serde(rename = "cloud", skip_serializing_if = "Option::is_none")]
    pub cloud: Option<String>,
    #[serde(rename = "cloud_account_id", skip_serializing_if = "Option::is_none")]
    pub cloud_account_id: Option<String>,
    #[serde(rename = "cloud_region", skip_serializing_if = "Option::is_none")]
    pub cloud_region: Option<String>,
    #[serde(rename = "cluster_id", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<String>,
    #[serde(rename = "cluster_name", skip_serializing_if = "Option::is_none")]
    pub cluster_name: Option<String>,
    #[serde(rename = "config_labels", skip_serializing_if = "Option::is_none")]
    pub config_labels: Option<String>,
    #[serde(rename = "config_user", skip_serializing_if = "Option::is_none")]
    pub config_user: Option<String>,
    #[serde(rename = "container_image_id", skip_serializing_if = "Option::is_none")]
    pub container_image_id: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    #[serde(rename = "cve_ids", skip_serializing_if = "Option::is_none")]
    pub cve_ids: Option<Vec<String>>,
    #[serde(rename = "first_seen", skip_serializing_if = "Option::is_none")]
    pub first_seen: Option<i64>,
    #[serde(
        rename = "host_config_devices",
        skip_serializing_if = "Option::is_none"
    )]
    pub host_config_devices: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(
        rename = "image_application_package_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_application_package_count: Option<i32>,
    #[serde(rename = "image_assessed_at", skip_serializing_if = "Option::is_none")]
    pub image_assessed_at: Option<i64>,
    #[serde(
        rename = "image_detection_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_detection_count: Option<i32>,
    #[serde(
        rename = "image_detection_id_list",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_detection_id_list: Option<Vec<String>>,
    #[serde(
        rename = "image_detection_name_list",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_detection_name_list: Option<Vec<String>>,
    #[serde(
        rename = "image_detection_severity_by_type",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_detection_severity_by_type: Option<std::collections::HashMap<String, i32>>,
    #[serde(rename = "image_digest", skip_serializing_if = "Option::is_none")]
    pub image_digest: Option<String>,
    #[serde(
        rename = "image_has_been_assessed",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_has_been_assessed: Option<bool>,
    #[serde(
        rename = "image_highest_severity_vulnerability",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_highest_severity_vulnerability: Option<String>,
    #[serde(rename = "image_id", skip_serializing_if = "Option::is_none")]
    pub image_id: Option<String>,
    #[serde(
        rename = "image_package_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_package_count: Option<i32>,
    #[serde(rename = "image_registry", skip_serializing_if = "Option::is_none")]
    pub image_registry: Option<String>,
    #[serde(rename = "image_repo", skip_serializing_if = "Option::is_none")]
    pub image_repo: Option<String>,
    #[serde(rename = "image_tag", skip_serializing_if = "Option::is_none")]
    pub image_tag: Option<String>,
    #[serde(
        rename = "image_vulnerability_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_vulnerability_count: Option<i32>,
    #[serde(
        rename = "image_vulnerability_severity_by_type",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_vulnerability_severity_by_type: Option<std::collections::HashMap<String, i32>>,
    #[serde(
        rename = "insecure_mount_source",
        skip_serializing_if = "Option::is_none"
    )]
    pub insecure_mount_source: Option<String>,
    #[serde(
        rename = "insecure_mount_type",
        skip_serializing_if = "Option::is_none"
    )]
    pub insecure_mount_type: Option<String>,
    #[serde(
        rename = "insecure_propagation_mode",
        skip_serializing_if = "Option::is_none"
    )]
    pub insecure_propagation_mode: Option<bool>,
    #[serde(rename = "interactive_mode", skip_serializing_if = "Option::is_none")]
    pub interactive_mode: Option<bool>,
    #[serde(rename = "ipv4", skip_serializing_if = "Option::is_none")]
    pub ipv4: Option<String>,
    #[serde(rename = "ipv6", skip_serializing_if = "Option::is_none")]
    pub ipv6: Option<String>,
    #[serde(rename = "kpa_coverage", skip_serializing_if = "Option::is_none")]
    pub kpa_coverage: Option<bool>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "labels_list", skip_serializing_if = "Option::is_none")]
    pub labels_list: Option<Vec<String>>,
    #[serde(rename = "last_seen", skip_serializing_if = "Option::is_none")]
    pub last_seen: Option<i64>,
    #[serde(rename = "linux_sensor_aid", skip_serializing_if = "Option::is_none")]
    pub linux_sensor_aid: Option<String>,
    #[serde(
        rename = "linux_sensor_config_build",
        skip_serializing_if = "Option::is_none"
    )]
    pub linux_sensor_config_build: Option<String>,
    #[serde(
        rename = "linux_sensor_coverage",
        skip_serializing_if = "Option::is_none"
    )]
    pub linux_sensor_coverage: Option<bool>,
    #[serde(rename = "lumos_sensor_aid", skip_serializing_if = "Option::is_none")]
    pub lumos_sensor_aid: Option<String>,
    #[serde(
        rename = "lumos_sensor_config_build",
        skip_serializing_if = "Option::is_none"
    )]
    pub lumos_sensor_config_build: Option<String>,
    #[serde(
        rename = "lumos_sensor_coverage",
        skip_serializing_if = "Option::is_none"
    )]
    pub lumos_sensor_coverage: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "node_id", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "node_name", skip_serializing_if = "Option::is_none")]
    pub node_name: Option<String>,
    #[serde(rename = "pod_id", skip_serializing_if = "Option::is_none")]
    pub pod_id: Option<String>,
    #[serde(rename = "pod_name", skip_serializing_if = "Option::is_none")]
    pub pod_name: Option<String>,
    #[serde(rename = "port_list", skip_serializing_if = "Option::is_none")]
    pub port_list: Option<Vec<std::collections::HashMap<String, String>>>,
    #[serde(rename = "privileged", skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(rename = "root_write_access", skip_serializing_if = "Option::is_none")]
    pub root_write_access: Option<bool>,
    #[serde(rename = "rpd", skip_serializing_if = "Option::is_none")]
    pub rpd: Option<Vec<i32>>,
    #[serde(rename = "run_as_root_group", skip_serializing_if = "Option::is_none")]
    pub run_as_root_group: Option<bool>,
    #[serde(rename = "run_as_root_user", skip_serializing_if = "Option::is_none")]
    pub run_as_root_user: Option<bool>,
    #[serde(rename = "running_status", skip_serializing_if = "Option::is_none")]
    pub running_status: Option<bool>,
    #[serde(rename = "snapshot_coverage", skip_serializing_if = "Option::is_none")]
    pub snapshot_coverage: Option<bool>,
    #[serde(rename = "unidentified", skip_serializing_if = "Option::is_none")]
    pub unidentified: Option<bool>,
    #[serde(rename = "volume_mounts", skip_serializing_if = "Option::is_none")]
    pub volume_mounts: Option<String>,
}

impl ModelsPeriodContainer {
    pub fn new(cid: String, id: String) -> ModelsPeriodContainer {
        ModelsPeriodContainer {
            agents: None,
            allow_privilege_escalation: None,
            cid,
            cloud: None,
            cloud_account_id: None,
            cloud_region: None,
            cluster_id: None,
            cluster_name: None,
            config_labels: None,
            config_user: None,
            container_image_id: None,
            created_at: None,
            cve_ids: None,
            first_seen: None,
            host_config_devices: None,
            id,
            image_application_package_count: None,
            image_assessed_at: None,
            image_detection_count: None,
            image_detection_id_list: None,
            image_detection_name_list: None,
            image_detection_severity_by_type: None,
            image_digest: None,
            image_has_been_assessed: None,
            image_highest_severity_vulnerability: None,
            image_id: None,
            image_package_count: None,
            image_registry: None,
            image_repo: None,
            image_tag: None,
            image_vulnerability_count: None,
            image_vulnerability_severity_by_type: None,
            insecure_mount_source: None,
            insecure_mount_type: None,
            insecure_propagation_mode: None,
            interactive_mode: None,
            ipv4: None,
            ipv6: None,
            kpa_coverage: None,
            labels: None,
            labels_list: None,
            last_seen: None,
            linux_sensor_aid: None,
            linux_sensor_config_build: None,
            linux_sensor_coverage: None,
            lumos_sensor_aid: None,
            lumos_sensor_config_build: None,
            lumos_sensor_coverage: None,
            name: None,
            namespace: None,
            node_id: None,
            node_name: None,
            pod_id: None,
            pod_name: None,
            port_list: None,
            privileged: None,
            root_write_access: None,
            rpd: None,
            run_as_root_group: None,
            run_as_root_user: None,
            running_status: None,
            snapshot_coverage: None,
            unidentified: None,
            volume_mounts: None,
        }
    }
}
