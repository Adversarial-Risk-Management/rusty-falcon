/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DomainPeriodCloudAwsAccountV1 {
    #[serde(rename = "CreatedAt")]
    pub created_at: String,
    #[serde(rename = "DeletedAt")]
    pub deleted_at: String,
    #[serde(rename = "ID")]
    pub id: i32,
    #[serde(rename = "UpdatedAt")]
    pub updated_at: String,
    /// 12 digit AWS provided unique identifier for the account.
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// AWS account name
    #[serde(rename = "account_name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
    #[serde(rename = "account_type", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<String>,
    #[serde(rename = "active_regions", skip_serializing_if = "Option::is_none")]
    pub active_regions: Option<Vec<String>>,
    #[serde(rename = "cid", skip_serializing_if = "Option::is_none")]
    pub cid: Option<String>,
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::DomainPeriodCloudCondition>>,
    /// csp live events are enabled
    #[serde(rename = "csp_events", skip_serializing_if = "Option::is_none")]
    pub csp_events: Option<bool>,
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    /// Permissions status for each product returned via API.
    #[serde(rename = "iam_service_permissions_status")]
    pub iam_service_permissions_status: Vec<models::DomainPeriodProductPermission>,
    #[serde(rename = "inventory_filter")]
    pub inventory_filter: Vec<models::DomainPeriodAwsInventoryFilterSetting>,
    #[serde(rename = "is_custom_rolename")]
    pub is_custom_rolename: bool,
    #[serde(rename = "is_master", skip_serializing_if = "Option::is_none")]
    pub is_master: Option<bool>,
    /// Up to 34 character AWS provided unique identifier for the organization.
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    #[serde(rename = "products")]
    pub products: Vec<models::DomainPeriodProductFeatures>,
    #[serde(rename = "resource_metadata")]
    pub resource_metadata: Box<models::DomainPeriodAwsAccountResourceMetadata>,
    /// 12 digit AWS provided unique identifier for the root account (of the organization this account belongs to).
    #[serde(rename = "root_account_id", skip_serializing_if = "Option::is_none")]
    pub root_account_id: Option<String>,
    #[serde(rename = "root_iam_role", skip_serializing_if = "Option::is_none")]
    pub root_iam_role: Option<bool>,
    /// Account registration status for each product and feature
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Vec<models::DomainPeriodProductFeaturesStatus>>,
    #[serde(rename = "target_ous", skip_serializing_if = "Option::is_none")]
    pub target_ous: Option<Vec<String>>,
    #[serde(
        rename = "use_existing_cloudtrail",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_existing_cloudtrail: Option<bool>,
}

impl DomainPeriodCloudAwsAccountV1 {
    pub fn new(
        created_at: String,
        deleted_at: String,
        id: i32,
        updated_at: String,
        iam_service_permissions_status: Vec<models::DomainPeriodProductPermission>,
        inventory_filter: Vec<models::DomainPeriodAwsInventoryFilterSetting>,
        is_custom_rolename: bool,
        products: Vec<models::DomainPeriodProductFeatures>,
        resource_metadata: models::DomainPeriodAwsAccountResourceMetadata,
    ) -> DomainPeriodCloudAwsAccountV1 {
        DomainPeriodCloudAwsAccountV1 {
            created_at,
            deleted_at,
            id,
            updated_at,
            account_id: None,
            account_name: None,
            account_type: None,
            active_regions: None,
            cid: None,
            conditions: None,
            csp_events: None,
            environment: None,
            iam_service_permissions_status,
            inventory_filter,
            is_custom_rolename,
            is_master: None,
            organization_id: None,
            products,
            resource_metadata: Box::new(resource_metadata),
            root_account_id: None,
            root_iam_role: None,
            status: None,
            target_ous: None,
            use_existing_cloudtrail: None,
        }
    }
}
