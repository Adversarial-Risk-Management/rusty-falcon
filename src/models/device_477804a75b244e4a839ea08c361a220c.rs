/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::Deserialize;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Device477804a75b244e4a839ea08c361a220c {
    #[serde(rename = "account_id")]
    pub account_id: String,
    #[serde(rename = "apps_count", deserialize_with = "Option::deserialize")]
    pub apps_count: Option<i32>,
    #[serde(rename = "device_name", deserialize_with = "Option::deserialize")]
    pub device_name: Option<String>,
    #[serde(
        rename = "globally_compliant",
        deserialize_with = "Option::deserialize"
    )]
    pub globally_compliant: Option<String>,
    #[serde(rename = "globally_managed", deserialize_with = "Option::deserialize")]
    pub globally_managed: Option<String>,
    #[serde(
        rename = "has_user_association",
        deserialize_with = "Option::deserialize"
    )]
    pub has_user_association: Option<bool>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "last_seen", deserialize_with = "Option::deserialize")]
    pub last_seen: Option<String>,
    #[serde(rename = "mac_address_list", deserialize_with = "Option::deserialize")]
    pub mac_address_list: Option<Vec<String>>,
    #[serde(rename = "os", deserialize_with = "Option::deserialize")]
    pub os: Option<String>,
    #[serde(rename = "os_version", deserialize_with = "Option::deserialize")]
    pub os_version: Option<String>,
    #[serde(rename = "platform", deserialize_with = "Option::deserialize")]
    pub platform: Option<String>,
    #[serde(
        rename = "privileged_roles_count",
        deserialize_with = "Option::deserialize"
    )]
    pub privileged_roles_count: Option<i32>,
    #[serde(rename = "reported_apps", deserialize_with = "Option::deserialize")]
    pub reported_apps: Option<Vec<String>>,
    #[serde(rename = "reporters")]
    pub reporters: Vec<String>,
    #[serde(rename = "user_email", deserialize_with = "Option::deserialize")]
    pub user_email: Option<String>,
    #[serde(rename = "user_exists", deserialize_with = "Option::deserialize")]
    pub user_exists: Option<bool>,
}

impl Device477804a75b244e4a839ea08c361a220c {
    pub fn new(
        account_id: String,
        apps_count: Option<i32>,
        device_name: Option<String>,
        globally_compliant: Option<String>,
        globally_managed: Option<String>,
        has_user_association: Option<bool>,
        id: String,
        last_seen: Option<String>,
        mac_address_list: Option<Vec<String>>,
        os: Option<String>,
        os_version: Option<String>,
        platform: Option<String>,
        privileged_roles_count: Option<i32>,
        reported_apps: Option<Vec<String>>,
        reporters: Vec<String>,
        user_email: Option<String>,
        user_exists: Option<bool>,
    ) -> Device477804a75b244e4a839ea08c361a220c {
        Device477804a75b244e4a839ea08c361a220c {
            account_id,
            apps_count,
            device_name,
            globally_compliant,
            globally_managed,
            has_user_association,
            id,
            last_seen,
            mac_address_list,
            os,
            os_version,
            platform,
            privileged_roles_count,
            reported_apps,
            reporters,
            user_email,
            user_exists,
        }
    }
}
