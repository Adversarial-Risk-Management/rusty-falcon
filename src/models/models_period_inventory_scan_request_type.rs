/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelsPeriodInventoryScanRequestType {
    #[serde(rename = "agent_uuid")]
    pub agent_uuid: String,
    #[serde(rename = "agent_version")]
    pub agent_version: String,
    #[serde(rename = "agent_version_hash")]
    pub agent_version_hash: String,
    #[serde(rename = "cluster_id")]
    pub cluster_id: String,
    #[serde(rename = "cluster_name")]
    pub cluster_name: String,
    #[serde(rename = "container_id", skip_serializing_if = "Option::is_none")]
    pub container_id: Option<String>,
    #[serde(rename = "ephemeral_scan", skip_serializing_if = "Option::is_none")]
    pub ephemeral_scan: Option<bool>,
    #[serde(rename = "helm_version")]
    pub helm_version: String,
    #[serde(
        rename = "high_entropy_strings",
        skip_serializing_if = "Option::is_none"
    )]
    pub high_entropy_strings: Option<Vec<models::ModelsPeriodHeStringFileInfoType>>,
    #[serde(rename = "host_ip")]
    pub host_ip: String,
    #[serde(rename = "host_name")]
    pub host_name: String,
    #[serde(rename = "inventory")]
    pub inventory: Box<models::ModelsPeriodInventoryType>,
    #[serde(rename = "original_image_name")]
    pub original_image_name: String,
    #[serde(rename = "pod_id", skip_serializing_if = "Option::is_none")]
    pub pod_id: Option<String>,
    #[serde(rename = "pod_name", skip_serializing_if = "Option::is_none")]
    pub pod_name: Option<String>,
    #[serde(rename = "pod_namespace", skip_serializing_if = "Option::is_none")]
    pub pod_namespace: Option<String>,
    #[serde(rename = "runmode")]
    pub runmode: String,
    #[serde(rename = "runtime_type", skip_serializing_if = "Option::is_none")]
    pub runtime_type: Option<String>,
    #[serde(rename = "scan_request")]
    pub scan_request: Box<models::ModelsPeriodScanRequestType>,
}

impl ModelsPeriodInventoryScanRequestType {
    pub fn new(
        agent_uuid: String,
        agent_version: String,
        agent_version_hash: String,
        cluster_id: String,
        cluster_name: String,
        helm_version: String,
        host_ip: String,
        host_name: String,
        inventory: models::ModelsPeriodInventoryType,
        original_image_name: String,
        runmode: String,
        scan_request: models::ModelsPeriodScanRequestType,
    ) -> ModelsPeriodInventoryScanRequestType {
        ModelsPeriodInventoryScanRequestType {
            agent_uuid,
            agent_version,
            agent_version_hash,
            cluster_id,
            cluster_name,
            container_id: None,
            ephemeral_scan: None,
            helm_version,
            high_entropy_strings: None,
            host_ip,
            host_name,
            inventory: Box::new(inventory),
            original_image_name,
            pod_id: None,
            pod_name: None,
            pod_namespace: None,
            runmode,
            runtime_type: None,
            scan_request: Box::new(scan_request),
        }
    }
}
