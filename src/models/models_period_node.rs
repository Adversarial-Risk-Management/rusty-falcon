/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelsPeriodNode {
    #[serde(rename = "agents")]
    pub agents: Vec<std::collections::HashMap<String, String>>,
    #[serde(rename = "annotations_list")]
    pub annotations_list: Vec<String>,
    #[serde(rename = "architecture")]
    pub architecture: String,
    #[serde(rename = "base_image")]
    pub base_image: String,
    #[serde(rename = "cid")]
    pub cid: String,
    #[serde(rename = "cloud_account_id")]
    pub cloud_account_id: String,
    #[serde(rename = "cloud_instance_id")]
    pub cloud_instance_id: String,
    #[serde(rename = "cloud_instance_type")]
    pub cloud_instance_type: String,
    #[serde(rename = "cloud_name")]
    pub cloud_name: String,
    #[serde(rename = "cloud_region")]
    pub cloud_region: String,
    #[serde(rename = "cloud_service")]
    pub cloud_service: String,
    #[serde(rename = "cluster_id")]
    pub cluster_id: String,
    #[serde(rename = "cluster_name")]
    pub cluster_name: String,
    #[serde(rename = "container_count")]
    pub container_count: i32,
    #[serde(rename = "container_runtime_version")]
    pub container_runtime_version: String,
    #[serde(rename = "cpu")]
    pub cpu: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "deleted_at", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<String>,
    #[serde(rename = "external_ip")]
    pub external_ip: String,
    #[serde(rename = "first_seen")]
    pub first_seen: String,
    #[serde(rename = "ipv4")]
    pub ipv4: String,
    #[serde(rename = "ipv6")]
    pub ipv6: String,
    #[serde(rename = "kac_agent_id")]
    pub kac_agent_id: String,
    #[serde(rename = "kernel_version")]
    pub kernel_version: String,
    #[serde(rename = "kubernetes_version")]
    pub kubernetes_version: String,
    #[serde(rename = "labels")]
    pub labels: std::collections::HashMap<String, String>,
    #[serde(rename = "labels_list")]
    pub labels_list: Vec<String>,
    #[serde(rename = "last_seen")]
    pub last_seen: String,
    #[serde(rename = "linux_sensor_coverage")]
    pub linux_sensor_coverage: bool,
    #[serde(rename = "memory")]
    pub memory: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "node_name")]
    pub node_name: String,
    #[serde(rename = "os")]
    pub os: String,
    #[serde(rename = "pod_cidr")]
    pub pod_cidr: String,
    #[serde(rename = "pod_count")]
    pub pod_count: i32,
    #[serde(rename = "provider_id")]
    pub provider_id: String,
    #[serde(rename = "resource_status")]
    pub resource_status: String,
    #[serde(rename = "storage")]
    pub storage: String,
    #[serde(rename = "uid")]
    pub uid: String,
}

impl ModelsPeriodNode {
    pub fn new(agents: Vec<std::collections::HashMap<String, String>>, annotations_list: Vec<String>, architecture: String, base_image: String, cid: String, cloud_account_id: String, cloud_instance_id: String, cloud_instance_type: String, cloud_name: String, cloud_region: String, cloud_service: String, cluster_id: String, cluster_name: String, container_count: i32, container_runtime_version: String, cpu: String, created_at: String, external_ip: String, first_seen: String, ipv4: String, ipv6: String, kac_agent_id: String, kernel_version: String, kubernetes_version: String, labels: std::collections::HashMap<String, String>, labels_list: Vec<String>, last_seen: String, linux_sensor_coverage: bool, memory: String, node_id: String, node_name: String, os: String, pod_cidr: String, pod_count: i32, provider_id: String, resource_status: String, storage: String, uid: String) -> ModelsPeriodNode {
        ModelsPeriodNode {
            agents,
            annotations_list,
            architecture,
            base_image,
            cid,
            cloud_account_id,
            cloud_instance_id,
            cloud_instance_type,
            cloud_name,
            cloud_region,
            cloud_service,
            cluster_id,
            cluster_name,
            container_count,
            container_runtime_version,
            cpu,
            created_at,
            deleted_at: None,
            external_ip,
            first_seen,
            ipv4,
            ipv6,
            kac_agent_id,
            kernel_version,
            kubernetes_version,
            labels,
            labels_list,
            last_seen,
            linux_sensor_coverage,
            memory,
            node_id,
            node_name,
            os,
            pod_cidr,
            pod_count,
            provider_id,
            resource_status,
            storage,
            uid,
        }
    }
}

