/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItautomationPeriodAggregateHostCount {
    /// Number of hosts where execution was canceled
    #[serde(rename = "canceled_host_count")]
    pub canceled_host_count: i32,
    /// Number of hosts where execution expired
    #[serde(rename = "expired_host_count")]
    pub expired_host_count: i32,
    /// Number of hosts where execution failed
    #[serde(rename = "failed_host_count")]
    pub failed_host_count: i32,
    /// Number of hosts where execution was initiated
    #[serde(rename = "initiated_host_count")]
    pub initiated_host_count: i32,
    /// Number of offline hosts that could not execute
    #[serde(rename = "offline_host_count")]
    pub offline_host_count: i32,
    /// Number of hosts queued for execution
    #[serde(rename = "queued_host_count")]
    pub queued_host_count: i32,
    /// Number of hosts currently executing
    #[serde(rename = "running_host_count")]
    pub running_host_count: i32,
    /// Number of hosts that completed execution successfully
    #[serde(rename = "success_host_count")]
    pub success_host_count: i32,
}

impl ItautomationPeriodAggregateHostCount {
    pub fn new(
        canceled_host_count: i32,
        expired_host_count: i32,
        failed_host_count: i32,
        initiated_host_count: i32,
        offline_host_count: i32,
        queued_host_count: i32,
        running_host_count: i32,
        success_host_count: i32,
    ) -> ItautomationPeriodAggregateHostCount {
        ItautomationPeriodAggregateHostCount {
            canceled_host_count,
            expired_host_count,
            failed_host_count,
            initiated_host_count,
            offline_host_count,
            queued_host_count,
            running_host_count,
            success_host_count,
        }
    }
}
