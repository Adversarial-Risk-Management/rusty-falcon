/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItautomationPeriodUpdateTaskRequest {
    /// Access type of the task
    #[serde(rename = "access_type", skip_serializing_if = "Option::is_none")]
    pub access_type: Option<AccessType>,
    /// User group IDs to add to the assigned user group IDs of the task, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
    #[serde(
        rename = "add_assigned_user_group_ids",
        skip_serializing_if = "Option::is_none"
    )]
    pub add_assigned_user_group_ids: Option<Vec<String>>,
    /// User IDs to add to the assigned user IDs of the task, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
    #[serde(
        rename = "add_assigned_user_ids",
        skip_serializing_if = "Option::is_none"
    )]
    pub add_assigned_user_ids: Option<Vec<String>>,
    /// Detailed description of what the task does. Example: User Table Validation Check
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Name of the task. Example: OSQuery Check
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// OSQuery to execute. Example: select * from users
    #[serde(rename = "os_query", skip_serializing_if = "Option::is_none")]
    pub os_query: Option<String>,
    #[serde(
        rename = "output_parser_config",
        skip_serializing_if = "Option::is_none"
    )]
    pub output_parser_config: Option<Box<models::ItautomationPeriodOutputParserConfig>>,
    #[serde(rename = "queries", skip_serializing_if = "Option::is_none")]
    pub queries: Option<Box<models::ItautomationPeriodScripts>>,
    #[serde(rename = "remediations", skip_serializing_if = "Option::is_none")]
    pub remediations: Option<Box<models::ItautomationPeriodScripts>>,
    /// User group IDs to remove from the assigned user group IDs of the task, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
    #[serde(
        rename = "remove_assigned_user_group_ids",
        skip_serializing_if = "Option::is_none"
    )]
    pub remove_assigned_user_group_ids: Option<Vec<String>>,
    /// User IDs to remove from the assigned user IDs of the task, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
    #[serde(
        rename = "remove_assigned_user_ids",
        skip_serializing_if = "Option::is_none"
    )]
    pub remove_assigned_user_ids: Option<Vec<String>>,
    /// Target filter in FQL format. Example: platform_name: 'Windows'
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// ID of the task group to associate this task with
    #[serde(rename = "task_group_id", skip_serializing_if = "Option::is_none")]
    pub task_group_id: Option<String>,
    /// Parameters for the task
    #[serde(rename = "task_parameters", skip_serializing_if = "Option::is_none")]
    pub task_parameters: Option<Vec<models::ItautomationPeriodTaskParameter>>,
    /// Type of task
    #[serde(rename = "task_type", skip_serializing_if = "Option::is_none")]
    pub task_type: Option<TaskType>,
    /// Conditions that trigger remediation scripts execution
    #[serde(rename = "trigger_condition", skip_serializing_if = "Option::is_none")]
    pub trigger_condition: Option<Vec<models::FalconforitapiPeriodConditionGroup>>,
    /// Conditions that verify the outcome of the remediation scripts execution
    #[serde(
        rename = "verification_condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub verification_condition: Option<Vec<models::FalconforitapiPeriodConditionGroup>>,
}

impl ItautomationPeriodUpdateTaskRequest {
    pub fn new() -> ItautomationPeriodUpdateTaskRequest {
        ItautomationPeriodUpdateTaskRequest {
            access_type: None,
            add_assigned_user_group_ids: None,
            add_assigned_user_ids: None,
            description: None,
            name: None,
            os_query: None,
            output_parser_config: None,
            queries: None,
            remediations: None,
            remove_assigned_user_group_ids: None,
            remove_assigned_user_ids: None,
            target: None,
            task_group_id: None,
            task_parameters: None,
            task_type: None,
            trigger_condition: None,
            verification_condition: None,
        }
    }
}
/// Access type of the task
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccessType {
    #[serde(rename = "Public")]
    Public,
    #[serde(rename = "Shared")]
    Shared,
}

impl Default for AccessType {
    fn default() -> AccessType {
        Self::Public
    }
}
/// Type of task
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaskType {
    #[serde(rename = "query")]
    Query,
    #[serde(rename = "remediation")]
    Remediation,
}

impl Default for TaskType {
    fn default() -> TaskType {
        Self::Query
    }
}
