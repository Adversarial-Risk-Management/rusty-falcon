/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelsPeriodCluster {
    #[serde(rename = "access")]
    pub access: String,
    #[serde(rename = "agent_status")]
    pub agent_status: String,
    #[serde(rename = "agents")]
    pub agents: Vec<std::collections::HashMap<String, String>>,
    #[serde(rename = "cid")]
    pub cid: String,
    #[serde(rename = "cloud_account_id")]
    pub cloud_account_id: String,
    #[serde(rename = "cloud_name")]
    pub cloud_name: String,
    #[serde(rename = "cloud_region")]
    pub cloud_region: String,
    #[serde(rename = "cloud_service")]
    pub cloud_service: String,
    #[serde(rename = "cluster_id")]
    pub cluster_id: String,
    #[serde(rename = "cluster_name")]
    pub cluster_name: String,
    #[serde(rename = "cluster_security_group")]
    pub cluster_security_group: String,
    #[serde(rename = "cluster_status")]
    pub cluster_status: String,
    #[serde(rename = "container_count")]
    pub container_count: i32,
    #[serde(rename = "first_seen")]
    pub first_seen: String,
    #[serde(rename = "iar_coverage")]
    pub iar_coverage: bool,
    #[serde(rename = "kac_agent_active")]
    pub kac_agent_active: bool,
    #[serde(rename = "kac_agent_id")]
    pub kac_agent_id: String,
    #[serde(rename = "kubernetes_version")]
    pub kubernetes_version: String,
    #[serde(rename = "labels_list")]
    pub labels_list: Vec<String>,
    #[serde(rename = "last_seen")]
    pub last_seen: String,
    #[serde(rename = "management_status")]
    pub management_status: String,
    #[serde(rename = "node_count")]
    pub node_count: i32,
    #[serde(rename = "pod_count")]
    pub pod_count: i32,
    #[serde(rename = "security_group")]
    pub security_group: String,
    #[serde(rename = "tags")]
    pub tags: std::collections::HashMap<String, String>,
    #[serde(rename = "virtual_network")]
    pub virtual_network: String,
}

impl ModelsPeriodCluster {
    pub fn new(access: String, agent_status: String, agents: Vec<std::collections::HashMap<String, String>>, cid: String, cloud_account_id: String, cloud_name: String, cloud_region: String, cloud_service: String, cluster_id: String, cluster_name: String, cluster_security_group: String, cluster_status: String, container_count: i32, first_seen: String, iar_coverage: bool, kac_agent_active: bool, kac_agent_id: String, kubernetes_version: String, labels_list: Vec<String>, last_seen: String, management_status: String, node_count: i32, pod_count: i32, security_group: String, tags: std::collections::HashMap<String, String>, virtual_network: String) -> ModelsPeriodCluster {
        ModelsPeriodCluster {
            access,
            agent_status,
            agents,
            cid,
            cloud_account_id,
            cloud_name,
            cloud_region,
            cloud_service,
            cluster_id,
            cluster_name,
            cluster_security_group,
            cluster_status,
            container_count,
            first_seen,
            iar_coverage,
            kac_agent_active,
            kac_agent_id,
            kubernetes_version,
            labels_list,
            last_seen,
            management_status,
            node_count,
            pod_count,
            security_group,
            tags,
            virtual_network,
        }
    }
}

