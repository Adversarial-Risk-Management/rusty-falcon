/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-08T00:00:04Z
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DomainPeriodDiscoverApiApplicationBrowserExtensionInstallation {
    /// The browser profile ID of this installation
    #[serde(rename = "browser_profile_id", skip_serializing_if = "Option::is_none")]
    pub browser_profile_id: Option<String>,
    /// The browser profile name of this installation
    #[serde(rename = "browser_profile_name", skip_serializing_if = "Option::is_none")]
    pub browser_profile_name: Option<String>,
    /// The version of the browser running this extension
    #[serde(rename = "browser_version", skip_serializing_if = "Option::is_none")]
    pub browser_version: Option<String>,
    /// Describes if the extension is enabled on this browser profile installation
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// The method that was used to install the browser extension
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// The file path location of the browser extension
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The role of the account that installed the extension
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// The host user SID for which the extension was installed
    #[serde(rename = "user_sid", skip_serializing_if = "Option::is_none")]
    pub user_sid: Option<String>,
    /// The host username for which the extension was installed
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl DomainPeriodDiscoverApiApplicationBrowserExtensionInstallation {
    pub fn new(enabled: bool) -> DomainPeriodDiscoverApiApplicationBrowserExtensionInstallation {
        DomainPeriodDiscoverApiApplicationBrowserExtensionInstallation {
            browser_profile_id: None,
            browser_profile_name: None,
            browser_version: None,
            enabled,
            method: None,
            path: None,
            role: None,
            user_sid: None,
            username: None,
        }
    }
}

