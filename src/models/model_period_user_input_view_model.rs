/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelPeriodUserInputViewModel {
    /// if not empty, only listed inputs are allowed
    #[serde(rename = "allowed_inputs")]
    pub allowed_inputs: Vec<String>,
    /// if not empty, only listed responders are allowed to provide input
    #[serde(rename = "allowed_responders")]
    pub allowed_responders: Vec<String>,
    /// whether or not the user input is completed yet
    #[serde(rename = "completed")]
    pub completed: bool,
    /// time at which the user input was modified
    #[serde(rename = "completed_at")]
    pub completed_at: String,
    /// time at which the user input was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// ID of the user input
    #[serde(rename = "id")]
    pub id: String,
    /// input provided by a responder user
    #[serde(rename = "input")]
    pub input: String,
    /// note added to user input at the time an input is provided
    #[serde(rename = "note")]
    pub note: String,
    /// user responding to the user input request
    #[serde(rename = "responder")]
    pub responder: String,
    /// time after which the user input may be expired and no longer actionable
    #[serde(rename = "timeout_at")]
    pub timeout_at: String,
}

impl ModelPeriodUserInputViewModel {
    pub fn new(
        allowed_inputs: Vec<String>,
        allowed_responders: Vec<String>,
        completed: bool,
        completed_at: String,
        created_at: String,
        id: String,
        input: String,
        note: String,
        responder: String,
        timeout_at: String,
    ) -> ModelPeriodUserInputViewModel {
        ModelPeriodUserInputViewModel {
            allowed_inputs,
            allowed_responders,
            completed,
            completed_at,
            created_at,
            id,
            input,
            note,
            responder,
            timeout_at,
        }
    }
}
