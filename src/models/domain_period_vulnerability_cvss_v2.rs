/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-08T00:00:04Z
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DomainPeriodVulnerabilityCvssV2 {
    /// Access complexity of the vulnerability, one of: Low, Medium, High
    #[serde(rename = "access_complexity", skip_serializing_if = "Option::is_none")]
    pub access_complexity: Option<String>,
    /// Access vector describing how the vulnerability is exploited, one of: Local, Network, AdjacentNetwork
    #[serde(rename = "access_vector", skip_serializing_if = "Option::is_none")]
    pub access_vector: Option<String>,
    /// Represents the number of times an attacker must authenticate to a target in order to exploit a vulnerability, one of: None, Single, Multiple
    #[serde(rename = "authentication", skip_serializing_if = "Option::is_none")]
    pub authentication: Option<String>,
    #[serde(rename = "availability_impact", skip_serializing_if = "Option::is_none")]
    pub availability_impact: Option<String>,
    #[serde(rename = "confidentiality_impact", skip_serializing_if = "Option::is_none")]
    pub confidentiality_impact: Option<String>,
    /// Represents the impact to integrity of a successfully exploited vulnerability, one of: None, Partial, Complete
    #[serde(rename = "integrity_impact", skip_serializing_if = "Option::is_none")]
    pub integrity_impact: Option<String>,
    /// Score of the vulnerability - which is between 0 and 10, the higher is the score - the more riskier the vulnerability is
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<f64>,
    /// Severity of the vulnerability, can be empty or one of: LOW, MEDIUM, HIGH
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
}

impl DomainPeriodVulnerabilityCvssV2 {
    pub fn new() -> DomainPeriodVulnerabilityCvssV2 {
        DomainPeriodVulnerabilityCvssV2 {
            access_complexity: None,
            access_vector: None,
            authentication: None,
            availability_impact: None,
            confidentiality_impact: None,
            integrity_impact: None,
            score: None,
            severity: None,
        }
    }
}

