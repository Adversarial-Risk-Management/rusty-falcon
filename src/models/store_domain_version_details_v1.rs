/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don't yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StoreDomainVersionDetailsV1 {
    /// list of API scopes the app needs for integration
    #[serde(rename = "api_scopes")]
    pub api_scopes: Vec<String>,
    /// the UTC timestamp when the version was approved by CrowdStrike
    #[serde(rename = "approval_date", skip_serializing_if = "Option::is_none")]
    pub approval_date: Option<String>,
    /// the changes associated with the version
    #[serde(rename = "change_log", skip_serializing_if = "Option::is_none")]
    pub change_log: Option<Vec<String>>,
    #[serde(rename = "event_filter")]
    pub event_filter: Box<crate::models::StoreDomainEventFilter>,
    /// the version of the partner's product that corresponds to the access version in the marketplace'
    #[serde(rename = "partner_version", skip_serializing_if = "Option::is_none")]
    pub partner_version: Option<String>,
    /// list of Partner RTR commands associated with the version
    #[serde(rename = "rtr_commands")]
    pub rtr_commands: Vec<crate::models::StoreDomainRtrCommandDetailsV1>,
    /// the current state of the version in the approval process
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// the internal app version represented as a date (YYYY-MM-DD)
    #[serde(rename = "version")]
    pub version: String,
}

impl StoreDomainVersionDetailsV1 {
    pub fn new(api_scopes: Vec<String>, event_filter: crate::models::StoreDomainEventFilter, rtr_commands: Vec<crate::models::StoreDomainRtrCommandDetailsV1>, version: String) -> StoreDomainVersionDetailsV1 {
        StoreDomainVersionDetailsV1 {
            api_scopes,
            approval_date: None,
            change_log: None,
            event_filter: Box::new(event_filter),
            partner_version: None,
            rtr_commands,
            state: None,
            version,
        }
    }
}
