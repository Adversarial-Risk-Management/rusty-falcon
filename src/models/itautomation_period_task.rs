/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItautomationPeriodTask {
    /// Access type of the task
    #[serde(rename = "access_type", skip_serializing_if = "Option::is_none")]
    pub access_type: Option<AccessType>,
    /// Assigned user group IDs of the task, when access_type is Shared.
    #[serde(
        rename = "assigned_user_group_ids",
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_user_group_ids: Option<Vec<String>>,
    /// Assigned user IDs of the task, when access_type is Shared.
    #[serde(rename = "assigned_user_ids", skip_serializing_if = "Option::is_none")]
    pub assigned_user_ids: Option<Vec<String>>,
    /// Username/api client name of who created the task. Example: john.smith@crowdstrike.com
    #[serde(rename = "created_by")]
    pub created_by: String,
    /// Timestamp when task was created. Example: 2025-01-23T18:11:20.148439Z
    #[serde(rename = "created_time")]
    pub created_time: String,
    /// Detailed description of what the task does. Example: User Table Validation Check
    #[serde(rename = "description")]
    pub description: String,
    /// Group memberships of the task
    #[serde(rename = "groups")]
    pub groups: Vec<models::FalconforitapiPeriodGroupMembership>,
    /// Indicates if the task has parameters. Example: true
    #[serde(
        rename = "has_task_parameters",
        skip_serializing_if = "Option::is_none"
    )]
    pub has_task_parameters: Option<bool>,
    /// Unique identifier for the task. Example: f64b95555ef54ea682619ce880d267cc
    #[serde(rename = "id")]
    pub id: String,
    /// Timestamp of last execution. Example: 2025-01-23T18:49:26.785778Z
    #[serde(rename = "last_run_time")]
    pub last_run_time: String,
    /// Username/api client name of who modified the task. Example: jane.doe@crowdstrike.com
    #[serde(rename = "modified_by")]
    pub modified_by: String,
    /// Timestamp when task was last modified. Example: 2025-01-23T18:49:26.785778Z
    #[serde(rename = "modified_time")]
    pub modified_time: String,
    /// Name of the task. Example: OSQuery Check
    #[serde(rename = "name")]
    pub name: String,
    /// OSQuery to execute. Example: select * from users
    #[serde(rename = "os_query", skip_serializing_if = "Option::is_none")]
    pub os_query: Option<String>,
    #[serde(
        rename = "output_parser_config",
        skip_serializing_if = "Option::is_none"
    )]
    pub output_parser_config: Option<Box<models::ItautomationPeriodOutputParserConfig>>,
    #[serde(rename = "queries", skip_serializing_if = "Option::is_none")]
    pub queries: Option<Box<models::ItautomationPeriodScripts>>,
    #[serde(rename = "remediations", skip_serializing_if = "Option::is_none")]
    pub remediations: Option<Box<models::ItautomationPeriodScripts>>,
    /// Number of times task has been executed. Example: 42
    #[serde(rename = "runs")]
    pub runs: i32,
    /// List of supported operating systems. Example: ['Windows', 'Linux', 'Mac']
    #[serde(rename = "supported_os")]
    pub supported_os: Vec<String>,
    /// Target filter in FQL format. Example: platform_name: 'Windows'
    #[serde(rename = "target")]
    pub target: String,
    /// Parameters definitions for the task
    #[serde(rename = "task_parameters", skip_serializing_if = "Option::is_none")]
    pub task_parameters: Option<Vec<models::ItautomationPeriodTaskParameter>>,
    /// Type of task. Example: query
    #[serde(rename = "task_type")]
    pub task_type: String,
    /// Conditions that trigger remediation scripts
    #[serde(rename = "trigger_condition", skip_serializing_if = "Option::is_none")]
    pub trigger_condition: Option<Vec<models::FalconforitapiPeriodConditionGroup>>,
    /// Conditions that verify the outcome of the remediation scripts execution
    #[serde(
        rename = "verification_condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub verification_condition: Option<Vec<models::FalconforitapiPeriodConditionGroup>>,
}

impl ItautomationPeriodTask {
    pub fn new(
        created_by: String,
        created_time: String,
        description: String,
        groups: Vec<models::FalconforitapiPeriodGroupMembership>,
        id: String,
        last_run_time: String,
        modified_by: String,
        modified_time: String,
        name: String,
        runs: i32,
        supported_os: Vec<String>,
        target: String,
        task_type: String,
    ) -> ItautomationPeriodTask {
        ItautomationPeriodTask {
            access_type: None,
            assigned_user_group_ids: None,
            assigned_user_ids: None,
            created_by,
            created_time,
            description,
            groups,
            has_task_parameters: None,
            id,
            last_run_time,
            modified_by,
            modified_time,
            name,
            os_query: None,
            output_parser_config: None,
            queries: None,
            remediations: None,
            runs,
            supported_os,
            target,
            task_parameters: None,
            task_type,
            trigger_condition: None,
            verification_condition: None,
        }
    }
}
/// Access type of the task
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccessType {
    #[serde(rename = "Public")]
    Public,
    #[serde(rename = "Shared")]
    Shared,
}

impl Default for AccessType {
    fn default() -> AccessType {
        Self::Public
    }
}
