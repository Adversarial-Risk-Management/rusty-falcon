/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-08T00:00:04Z
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonschemaPeriodSubSchema {
    #[serde(rename = "$ref", skip_serializing_if = "Option::is_none")]
    pub dollar_ref: Option<String>,
    #[serde(rename = "$schema", skip_serializing_if = "Option::is_none")]
    pub dollar_schema: Option<String>,
    #[serde(rename = "additionalItems", skip_serializing_if = "Option::is_none")]
    pub additional_items: Option<String>,
    #[serde(rename = "additionalProperties", skip_serializing_if = "Option::is_none")]
    pub additional_properties: Option<String>,
    #[serde(rename = "allOf", skip_serializing_if = "Option::is_none")]
    pub all_of: Option<Vec<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "anyOf", skip_serializing_if = "Option::is_none")]
    pub any_of: Option<Vec<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "binaryEncoding", skip_serializing_if = "Option::is_none")]
    pub binary_encoding: Option<String>,
    #[serde(rename = "const", skip_serializing_if = "Option::is_none")]
    pub r#const: Option<serde_json::Value>,
    #[serde(rename = "default", skip_serializing_if = "Option::is_none")]
    pub default: Option<serde_json::Value>,
    #[serde(rename = "dependencies", skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<std::collections::HashMap<String, models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
    pub deprecated: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "else", skip_serializing_if = "Option::is_none")]
    pub r#else: Option<Box<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "enum", skip_serializing_if = "Option::is_none")]
    pub r#enum: Option<Vec<serde_json::Value>>,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(rename = "examples", skip_serializing_if = "Option::is_none")]
    pub examples: Option<Vec<serde_json::Value>>,
    #[serde(rename = "exclusiveMaximum", skip_serializing_if = "Option::is_none")]
    pub exclusive_maximum: Option<bool>,
    #[serde(rename = "exclusiveMinimum", skip_serializing_if = "Option::is_none")]
    pub exclusive_minimum: Option<bool>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(rename = "if", skip_serializing_if = "Option::is_none")]
    pub r#if: Option<Box<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Box<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "maxItems", skip_serializing_if = "Option::is_none")]
    pub max_items: Option<i32>,
    #[serde(rename = "maxLength", skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i32>,
    #[serde(rename = "maxProperties", skip_serializing_if = "Option::is_none")]
    pub max_properties: Option<i32>,
    #[serde(rename = "maximum", skip_serializing_if = "Option::is_none")]
    pub maximum: Option<i32>,
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<Box<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "minItems", skip_serializing_if = "Option::is_none")]
    pub min_items: Option<i32>,
    #[serde(rename = "minLength", skip_serializing_if = "Option::is_none")]
    pub min_length: Option<i32>,
    #[serde(rename = "minProperties", skip_serializing_if = "Option::is_none")]
    pub min_properties: Option<i32>,
    #[serde(rename = "minimum", skip_serializing_if = "Option::is_none")]
    pub minimum: Option<i32>,
    #[serde(rename = "multipleOf", skip_serializing_if = "Option::is_none")]
    pub multiple_of: Option<i32>,
    #[serde(rename = "not", skip_serializing_if = "Option::is_none")]
    pub not: Option<Box<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "oneOf", skip_serializing_if = "Option::is_none")]
    pub one_of: Option<Vec<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "pattern", skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(rename = "patternProperties", skip_serializing_if = "Option::is_none")]
    pub pattern_properties: Option<std::collections::HashMap<String, models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<std::collections::HashMap<String, models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<Vec<String>>,
    #[serde(rename = "then", skip_serializing_if = "Option::is_none")]
    pub then: Option<Box<models::JsonschemaPeriodSubSchema>>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "ui:component", skip_serializing_if = "Option::is_none")]
    pub ui_colon_component: Option<String>,
    #[serde(rename = "uniqueItems", skip_serializing_if = "Option::is_none")]
    pub unique_items: Option<bool>,
    #[serde(rename = "x-cs-authorization", skip_serializing_if = "Option::is_none")]
    pub x_cs_authorization: Option<Box<models::JsonschemaPeriodAuthorization>>,
    #[serde(rename = "x-cs-can-create", skip_serializing_if = "Option::is_none")]
    pub x_cs_can_create: Option<bool>,
    #[serde(rename = "x-cs-condition-group-fields", skip_serializing_if = "Option::is_none")]
    pub x_cs_condition_group_fields: Option<Box<models::JsonschemaPeriodConditionGroupFields>>,
    #[serde(rename = "x-cs-do-not-hide", skip_serializing_if = "Option::is_none")]
    pub x_cs_do_not_hide: Option<bool>,
    #[serde(rename = "x-cs-immutable", skip_serializing_if = "Option::is_none")]
    pub x_cs_immutable: Option<bool>,
    #[serde(rename = "x-cs-indexable", skip_serializing_if = "Option::is_none")]
    pub x_cs_indexable: Option<bool>,
    #[serde(rename = "x-cs-indexable-fields", skip_serializing_if = "Option::is_none")]
    pub x_cs_indexable_fields: Option<Vec<models::JsonschemaPeriodCollectionIndexField>>,
    #[serde(rename = "x-cs-max-duration", skip_serializing_if = "Option::is_none")]
    pub x_cs_max_duration: Option<i32>,
    #[serde(rename = "x-cs-min-duration", skip_serializing_if = "Option::is_none")]
    pub x_cs_min_duration: Option<i32>,
    #[serde(rename = "x-cs-not-parameterizable", skip_serializing_if = "Option::is_none")]
    pub x_cs_not_parameterizable: Option<bool>,
    #[serde(rename = "x-cs-order", skip_serializing_if = "Option::is_none")]
    pub x_cs_order: Option<Vec<String>>,
    #[serde(rename = "x-cs-pivot", skip_serializing_if = "Option::is_none")]
    pub x_cs_pivot: Option<Box<models::JsonschemaPeriodPivot>>,
    #[serde(rename = "x-cs-signals", skip_serializing_if = "Option::is_none")]
    pub x_cs_signals: Option<Box<models::JsonschemaPeriodSignalsExtensions>>,
    #[serde(rename = "x-cs-signals-category", skip_serializing_if = "Option::is_none")]
    pub x_cs_signals_category: Option<String>,
    #[serde(rename = "x-cs-signals-operators", skip_serializing_if = "Option::is_none")]
    pub x_cs_signals_operators: Option<Vec<String>>,
    #[serde(rename = "x-cs-signals-subCategory", skip_serializing_if = "Option::is_none")]
    pub x_cs_signals_sub_category: Option<String>,
    #[serde(rename = "x-cs-tags", skip_serializing_if = "Option::is_none")]
    pub x_cs_tags: Option<Vec<String>>,
    #[serde(rename = "x-cs-ui", skip_serializing_if = "Option::is_none")]
    pub x_cs_ui: Option<Box<models::JsonschemaPeriodUiExtensions>>,
    #[serde(rename = "x-cs-workflow", skip_serializing_if = "Option::is_none")]
    pub x_cs_workflow: Option<Box<models::JsonschemaPeriodWorkflowExtensions>>,
}

impl JsonschemaPeriodSubSchema {
    pub fn new() -> JsonschemaPeriodSubSchema {
        JsonschemaPeriodSubSchema {
            dollar_ref: None,
            dollar_schema: None,
            additional_items: None,
            additional_properties: None,
            all_of: None,
            any_of: None,
            binary_encoding: None,
            r#const: None,
            default: None,
            dependencies: None,
            deprecated: None,
            description: None,
            r#else: None,
            r#enum: None,
            error_message: None,
            examples: None,
            exclusive_maximum: None,
            exclusive_minimum: None,
            format: None,
            r#if: None,
            items: None,
            max_items: None,
            max_length: None,
            max_properties: None,
            maximum: None,
            media: None,
            min_items: None,
            min_length: None,
            min_properties: None,
            minimum: None,
            multiple_of: None,
            not: None,
            one_of: None,
            pattern: None,
            pattern_properties: None,
            properties: None,
            required: None,
            then: None,
            title: None,
            r#type: None,
            ui_colon_component: None,
            unique_items: None,
            x_cs_authorization: None,
            x_cs_can_create: None,
            x_cs_condition_group_fields: None,
            x_cs_do_not_hide: None,
            x_cs_immutable: None,
            x_cs_indexable: None,
            x_cs_indexable_fields: None,
            x_cs_max_duration: None,
            x_cs_min_duration: None,
            x_cs_not_parameterizable: None,
            x_cs_order: None,
            x_cs_pivot: None,
            x_cs_signals: None,
            x_cs_signals_category: None,
            x_cs_signals_operators: None,
            x_cs_signals_sub_category: None,
            x_cs_tags: None,
            x_cs_ui: None,
            x_cs_workflow: None,
        }
    }
}

