/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2025-07-18T00:00:03Z
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TypesPeriodInterface {
    #[serde(rename = "Properties")]
    pub properties: std::collections::HashMap<String, String>,
    #[serde(rename = "accessingMethods", skip_serializing_if = "Option::is_none")]
    pub accessing_methods: Option<Vec<String>>,
    #[serde(rename = "beanClassName", skip_serializing_if = "Option::is_none")]
    pub bean_class_name: Option<String>,
    #[serde(rename = "beanName", skip_serializing_if = "Option::is_none")]
    pub bean_name: Option<String>,
    #[serde(rename = "brokerHost", skip_serializing_if = "Option::is_none")]
    pub broker_host: Option<String>,
    #[serde(rename = "brokerPort", skip_serializing_if = "Option::is_none")]
    pub broker_port: Option<i32>,
    #[serde(rename = "catalog", skip_serializing_if = "Option::is_none")]
    pub catalog: Option<String>,
    #[serde(rename = "columns", skip_serializing_if = "Option::is_none")]
    pub columns: Option<Vec<String>>,
    #[serde(rename = "consumes", skip_serializing_if = "Option::is_none")]
    pub consumes: Option<Vec<String>>,
    #[serde(rename = "database", skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    #[serde(rename = "driver", skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    #[serde(rename = "durableSubscription", skip_serializing_if = "Option::is_none")]
    pub durable_subscription: Option<String>,
    #[serde(rename = "ejbVersion", skip_serializing_if = "Option::is_none")]
    pub ejb_version: Option<String>,
    #[serde(rename = "framework", skip_serializing_if = "Option::is_none")]
    pub framework: Option<String>,
    #[serde(rename = "hasPassword", skip_serializing_if = "Option::is_none")]
    pub has_password: Option<bool>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "interfaceName", skip_serializing_if = "Option::is_none")]
    pub interface_name: Option<String>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(rename = "portType", skip_serializing_if = "Option::is_none")]
    pub port_type: Option<String>,
    #[serde(rename = "produces", skip_serializing_if = "Option::is_none")]
    pub produces: Option<Vec<String>>,
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(rename = "puName", skip_serializing_if = "Option::is_none")]
    pub pu_name: Option<String>,
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    #[serde(rename = "services", skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<models::TypesPeriodInterfaceService>>,
    #[serde(rename = "sessionType", skip_serializing_if = "Option::is_none")]
    pub session_type: Option<String>,
    #[serde(rename = "table", skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
    #[serde(rename = "technology", skip_serializing_if = "Option::is_none")]
    pub technology: Option<String>,
    #[serde(rename = "topic", skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    #[serde(rename = "topicType", skip_serializing_if = "Option::is_none")]
    pub topic_type: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl TypesPeriodInterface {
    pub fn new(properties: std::collections::HashMap<String, String>) -> TypesPeriodInterface {
        TypesPeriodInterface {
            properties,
            accessing_methods: None,
            bean_class_name: None,
            bean_name: None,
            broker_host: None,
            broker_port: None,
            catalog: None,
            columns: None,
            consumes: None,
            database: None,
            direction: None,
            driver: None,
            durable_subscription: None,
            ejb_version: None,
            framework: None,
            has_password: None,
            id: None,
            interface_name: None,
            method: None,
            path: None,
            port: None,
            port_type: None,
            produces: None,
            provider: None,
            pu_name: None,
            schema: None,
            services: None,
            session_type: None,
            table: None,
            technology: None,
            topic: None,
            topic_type: None,
            r#type: None,
            username: None,
        }
    }
}

